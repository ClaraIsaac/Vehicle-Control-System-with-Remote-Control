
eco_racing_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002cf6  00002d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800086  00800086  00002db0  2**0
                  ALLOC
  3 .stab         00002b50  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e9  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000069e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000088e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000097cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a57c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a969  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 11 	call	0x2358	; 0x2358 <main>
      8a:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DC_motor_init>:
 * Initialize the DC motor:
 * 1. Setup the DC motor pins directions by use the GPIO driver.
 * 2. Initialize Values on pins.
 */
void DC_motor_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for A, B pins as output pins */
	GPIO_setupPinDirection(DC_motor_A_PORT_ID, DC_motor_A_PIN_ID, PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_motor_B_PORT_ID, DC_motor_B_PIN_ID, PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	65 e0       	ldi	r22, 0x05	; 5
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

	/* Write on the PINS Logic Low */
	GPIO_writePin(DC_motor_A_PORT_ID, DC_motor_A_PIN_ID, LOGIC_LOW);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	64 e0       	ldi	r22, 0x04	; 4
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(DC_motor_B_PORT_ID, DC_motor_B_PIN_ID, LOGIC_LOW);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	65 e0       	ldi	r22, 0x05	; 5
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <speed_of_vehicle>:
/*
 * Description:
 * Move the motor with a specific speed using PWM timer0
 */
void speed_of_vehicle(uint8 speed)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <speed_of_vehicle+0x6>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 duty_cycle = (speed * 255) / 100; /* Take the percentage speed and multiply by (2^8 - 1) */
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	48 2f       	mov	r20, r24
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	ca 01       	movw	r24, r20
     b90:	9c 01       	movw	r18, r24
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	c9 01       	movw	r24, r18
     b98:	96 95       	lsr	r25
     b9a:	98 2f       	mov	r25, r24
     b9c:	88 27       	eor	r24, r24
     b9e:	97 95       	ror	r25
     ba0:	87 95       	ror	r24
     ba2:	82 1b       	sub	r24, r18
     ba4:	93 0b       	sbc	r25, r19
     ba6:	84 0f       	add	r24, r20
     ba8:	95 1f       	adc	r25, r21
     baa:	24 e6       	ldi	r18, 0x64	; 100
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	b9 01       	movw	r22, r18
     bb0:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__divmodhi4>
     bb4:	cb 01       	movw	r24, r22
     bb6:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(duty_cycle); /* Send the duty cycle to PWM function to generate the PWM signal */
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	0e 94 cd 13 	call	0x279a	; 0x279a <PWM_Timer0_Start>
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <direction_of_vehicle>:
/*
 * Description:
 * Specify the direction of the motor: Forward or Backward.
 */
void direction_of_vehicle(uint8 direction)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 'B') /* Backward Direction */
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	82 34       	cpi	r24, 0x42	; 66
     bd8:	59 f4       	brne	.+22     	; 0xbf0 <direction_of_vehicle+0x28>
	{
		/* A = 1, B = 0 */
		GPIO_writePin(DC_motor_A_PORT_ID, DC_motor_A_PIN_ID, LOGIC_HIGH);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	64 e0       	ldi	r22, 0x04	; 4
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
		GPIO_writePin(DC_motor_B_PORT_ID, DC_motor_B_PIN_ID, LOGIC_LOW);
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	65 e0       	ldi	r22, 0x05	; 5
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <direction_of_vehicle+0x42>
	}
	else if (direction == 'F') /* Backward Direction */
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	86 34       	cpi	r24, 0x46	; 70
     bf4:	51 f4       	brne	.+20     	; 0xc0a <direction_of_vehicle+0x42>
	{
		/* A = 0, B = 1 */
		GPIO_writePin(DC_motor_A_PORT_ID, DC_motor_A_PIN_ID, LOGIC_LOW);
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	64 e0       	ldi	r22, 0x04	; 4
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
		GPIO_writePin(DC_motor_B_PORT_ID, DC_motor_B_PIN_ID, LOGIC_HIGH);
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	65 e0       	ldi	r22, 0x05	; 5
     c04:	41 e0       	ldi	r20, 0x01	; 1
     c06:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	}
}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <Stepper_motor_init>:
 * Initialize the Stepper motor:
 * 1. Setup the Stepper motor pins directions by use the GPIO driver.
 * 2. Initialize Values on pins.
 */
void Stepper_motor_init(void)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for A, B, Abar, Bbar pins as output pins */
	GPIO_setupPinDirection(Stepper_motor_A_PORT_ID, Stepper_motor_A_PIN_ID, PIN_OUTPUT);
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Stepper_motor_B_PORT_ID, Stepper_motor_B_PIN_ID, PIN_OUTPUT);
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	63 e0       	ldi	r22, 0x03	; 3
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Stepper_motor_ABar_PORT_ID, Stepper_motor_ABar_PIN_ID, PIN_OUTPUT);
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	64 e0       	ldi	r22, 0x04	; 4
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Stepper_motor_BBar_PORT_ID, Stepper_motor_BBar_PIN_ID, PIN_OUTPUT);
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	65 e0       	ldi	r22, 0x05	; 5
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

	/* Write on the PINS Logic Low */
	GPIO_writePin(Stepper_motor_A_PORT_ID, Stepper_motor_A_PIN_ID, LOGIC_LOW);
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(Stepper_motor_B_PORT_ID, Stepper_motor_B_PIN_ID, LOGIC_LOW);
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	63 e0       	ldi	r22, 0x03	; 3
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(Stepper_motor_ABar_PORT_ID, Stepper_motor_ABar_PIN_ID, LOGIC_LOW);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	64 e0       	ldi	r22, 0x04	; 4
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(Stepper_motor_BBar_PORT_ID, Stepper_motor_BBar_PIN_ID, LOGIC_LOW);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	65 e0       	ldi	r22, 0x05	; 5
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
}
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <Stepper_motor_direction_and_angle>:
/*
 * Description:
 * Setup the angle and the direction (Left or Right) of the Stepper motor.
 */
void Stepper_motor_direction_and_angle(uint8 direction, uint8 angle, sint16 current_angle)
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <Stepper_motor_direction_and_angle+0x6>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <Stepper_motor_direction_and_angle+0x8>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	6a 83       	std	Y+2, r22	; 0x02
     c80:	5c 83       	std	Y+4, r21	; 0x04
     c82:	4b 83       	std	Y+3, r20	; 0x03
	/* Return to 0 degree from your position */
	if (current_angle < 0)
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	99 23       	and	r25, r25
     c8a:	2c f4       	brge	.+10     	; 0xc96 <Stepper_motor_direction_and_angle+0x26>
	{
		clockwiseturn((current_angle * -1));
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	81 95       	neg	r24
     c90:	0e 94 67 06 	call	0xcce	; 0xcce <clockwiseturn>
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <Stepper_motor_direction_and_angle+0x36>
	}
	else if (current_angle > 0)
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	18 16       	cp	r1, r24
     c9c:	19 06       	cpc	r1, r25
     c9e:	1c f4       	brge	.+6      	; 0xca6 <Stepper_motor_direction_and_angle+0x36>
	{
		anticlockwiseturn(current_angle);
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	0e 94 4c 08 	call	0x1098	; 0x1098 <anticlockwiseturn>
	}

	/* Go to the angle specified */
	if (direction == 'R') // Right Direction
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	82 35       	cpi	r24, 0x52	; 82
     caa:	21 f4       	brne	.+8      	; 0xcb4 <Stepper_motor_direction_and_angle+0x44>
	{
		clockwiseturn(angle);
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	0e 94 67 06 	call	0xcce	; 0xcce <clockwiseturn>
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <Stepper_motor_direction_and_angle+0x50>
	}
	else if (direction == 'L') // Left Direction
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	8c 34       	cpi	r24, 0x4C	; 76
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <Stepper_motor_direction_and_angle+0x50>
	{
		anticlockwiseturn(angle);
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	0e 94 4c 08 	call	0x1098	; 0x1098 <anticlockwiseturn>
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <clockwiseturn>:
/*
 * Description:
 * Move clockwise.
 */
void clockwiseturn(uint8 angles)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	e2 97       	sbiw	r28, 0x32	; 50
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	8a ab       	std	Y+50, r24	; 0x32
	 * counter for looping until reach the angle value
	 * clockwise_array to rotate in clockwise direction
	 * i for looping over the clockwise_array
	 * j for looping over the array the check which position the motor hold
	 */
	uint8 counter = 0, i, j, clockwise_array[4] = {12,6,3,9};
     ce4:	1d a6       	std	Y+45, r1	; 0x2d
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	8e a7       	std	Y+46, r24	; 0x2e
     cea:	86 e0       	ldi	r24, 0x06	; 6
     cec:	8f a7       	std	Y+47, r24	; 0x2f
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	88 ab       	std	Y+48, r24	; 0x30
     cf2:	89 e0       	ldi	r24, 0x09	; 9
     cf4:	89 ab       	std	Y+49, r24	; 0x31
	if (final_position == 0) /* if the motor didn't move yet */
     cf6:	80 91 86 00 	lds	r24, 0x0086
     cfa:	88 23       	and	r24, r24
     cfc:	09 f0       	breq	.+2      	; 0xd00 <clockwiseturn+0x32>
     cfe:	7d c0       	rjmp	.+250    	; 0xdfa <clockwiseturn+0x12c>
	{
		PORTC = (PORTC & 0xC3) | (12 << 2); /* initial Position */
     d00:	a5 e3       	ldi	r26, 0x35	; 53
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e3       	ldi	r30, 0x35	; 53
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	83 7c       	andi	r24, 0xC3	; 195
     d0c:	80 63       	ori	r24, 0x30	; 48
     d0e:	8c 93       	st	X, r24
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a8 e4       	ldi	r26, 0x48	; 72
     d16:	b2 e4       	ldi	r27, 0x42	; 66
     d18:	8f a3       	std	Y+39, r24	; 0x27
     d1a:	98 a7       	std	Y+40, r25	; 0x28
     d1c:	a9 a7       	std	Y+41, r26	; 0x29
     d1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d20:	6f a1       	ldd	r22, Y+39	; 0x27
     d22:	78 a5       	ldd	r23, Y+40	; 0x28
     d24:	89 a5       	ldd	r24, Y+41	; 0x29
     d26:	9a a5       	ldd	r25, Y+42	; 0x2a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a e7       	ldi	r20, 0x7A	; 122
     d2e:	53 e4       	ldi	r21, 0x43	; 67
     d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	8b a3       	std	Y+35, r24	; 0x23
     d3a:	9c a3       	std	Y+36, r25	; 0x24
     d3c:	ad a3       	std	Y+37, r26	; 0x25
     d3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d40:	6b a1       	ldd	r22, Y+35	; 0x23
     d42:	7c a1       	ldd	r23, Y+36	; 0x24
     d44:	8d a1       	ldd	r24, Y+37	; 0x25
     d46:	9e a1       	ldd	r25, Y+38	; 0x26
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e8       	ldi	r20, 0x80	; 128
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d54:	88 23       	and	r24, r24
     d56:	2c f4       	brge	.+10     	; 0xd62 <clockwiseturn+0x94>
		__ticks = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9a a3       	std	Y+34, r25	; 0x22
     d5e:	89 a3       	std	Y+33, r24	; 0x21
     d60:	3f c0       	rjmp	.+126    	; 0xde0 <clockwiseturn+0x112>
	else if (__tmp > 65535)
     d62:	6b a1       	ldd	r22, Y+35	; 0x23
     d64:	7c a1       	ldd	r23, Y+36	; 0x24
     d66:	8d a1       	ldd	r24, Y+37	; 0x25
     d68:	9e a1       	ldd	r25, Y+38	; 0x26
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	3f ef       	ldi	r19, 0xFF	; 255
     d6e:	4f e7       	ldi	r20, 0x7F	; 127
     d70:	57 e4       	ldi	r21, 0x47	; 71
     d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d76:	18 16       	cp	r1, r24
     d78:	4c f5       	brge	.+82     	; 0xdcc <clockwiseturn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7a:	6f a1       	ldd	r22, Y+39	; 0x27
     d7c:	78 a5       	ldd	r23, Y+40	; 0x28
     d7e:	89 a5       	ldd	r24, Y+41	; 0x29
     d80:	9a a5       	ldd	r25, Y+42	; 0x2a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9a a3       	std	Y+34, r25	; 0x22
     da0:	89 a3       	std	Y+33, r24	; 0x21
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <clockwiseturn+0xf4>
     da4:	89 e1       	ldi	r24, 0x19	; 25
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	98 a3       	std	Y+32, r25	; 0x20
     daa:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dae:	98 a1       	ldd	r25, Y+32	; 0x20
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <clockwiseturn+0xe2>
     db4:	98 a3       	std	Y+32, r25	; 0x20
     db6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db8:	89 a1       	ldd	r24, Y+33	; 0x21
     dba:	9a a1       	ldd	r25, Y+34	; 0x22
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	9a a3       	std	Y+34, r25	; 0x22
     dc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc2:	89 a1       	ldd	r24, Y+33	; 0x21
     dc4:	9a a1       	ldd	r25, Y+34	; 0x22
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	69 f7       	brne	.-38     	; 0xda4 <clockwiseturn+0xd6>
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <clockwiseturn+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dcc:	6b a1       	ldd	r22, Y+35	; 0x23
     dce:	7c a1       	ldd	r23, Y+36	; 0x24
     dd0:	8d a1       	ldd	r24, Y+37	; 0x25
     dd2:	9e a1       	ldd	r25, Y+38	; 0x26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9a a3       	std	Y+34, r25	; 0x22
     dde:	89 a3       	std	Y+33, r24	; 0x21
     de0:	89 a1       	ldd	r24, Y+33	; 0x21
     de2:	9a a1       	ldd	r25, Y+34	; 0x22
     de4:	9e 8f       	std	Y+30, r25	; 0x1e
     de6:	8d 8f       	std	Y+29, r24	; 0x1d
     de8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <clockwiseturn+0x11e>
     df0:	9e 8f       	std	Y+30, r25	; 0x1e
     df2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		i = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8c a7       	std	Y+44, r24	; 0x2c
     df8:	ac c0       	rjmp	.+344    	; 0xf52 <clockwiseturn+0x284>
	}
	else{
		/* find the last position and start from it */
		for (j = 0; j <4; j++)
     dfa:	1b a6       	std	Y+43, r1	; 0x2b
     dfc:	12 c0       	rjmp	.+36     	; 0xe22 <clockwiseturn+0x154>
		{
			if(final_position == clockwise_array[j])
     dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	ce 01       	movw	r24, r28
     e06:	8e 96       	adiw	r24, 0x2e	; 46
     e08:	fc 01       	movw	r30, r24
     e0a:	e2 0f       	add	r30, r18
     e0c:	f3 1f       	adc	r31, r19
     e0e:	90 81       	ld	r25, Z
     e10:	80 91 86 00 	lds	r24, 0x0086
     e14:	98 17       	cp	r25, r24
     e16:	11 f4       	brne	.+4      	; 0xe1c <clockwiseturn+0x14e>
				i = j;
     e18:	8b a5       	ldd	r24, Y+43	; 0x2b
     e1a:	8c a7       	std	Y+44, r24	; 0x2c
		_delay_ms(50);
		i = 1;
	}
	else{
		/* find the last position and start from it */
		for (j = 0; j <4; j++)
     e1c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	8b a7       	std	Y+43, r24	; 0x2b
     e22:	8b a5       	ldd	r24, Y+43	; 0x2b
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	58 f3       	brcs	.-42     	; 0xdfe <clockwiseturn+0x130>
     e28:	94 c0       	rjmp	.+296    	; 0xf52 <clockwiseturn+0x284>
		}
	}
	while(counter < angles)
	{
		/* write on the 4 pins the required value to move the motor */
		PORTC = (PORTC & 0xC3) | (clockwise_array[i] << 2);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	43 7c       	andi	r20, 0xC3	; 195
     e38:	8c a5       	ldd	r24, Y+44	; 0x2c
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	ce 01       	movw	r24, r28
     e40:	8e 96       	adiw	r24, 0x2e	; 46
     e42:	fc 01       	movw	r30, r24
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
		i++;
     e5a:	8c a5       	ldd	r24, Y+44	; 0x2c
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	8c a7       	std	Y+44, r24	; 0x2c
		if (i == 4) /* return to the first element in the array */
     e60:	8c a5       	ldd	r24, Y+44	; 0x2c
     e62:	84 30       	cpi	r24, 0x04	; 4
     e64:	09 f4       	brne	.+2      	; 0xe68 <clockwiseturn+0x19a>
			i = 0;
     e66:	1c a6       	std	Y+44, r1	; 0x2c
		counter++;
     e68:	8d a5       	ldd	r24, Y+45	; 0x2d
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	8d a7       	std	Y+45, r24	; 0x2d
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a8 e4       	ldi	r26, 0x48	; 72
     e74:	b2 e4       	ldi	r27, 0x42	; 66
     e76:	89 8f       	std	Y+25, r24	; 0x19
     e78:	9a 8f       	std	Y+26, r25	; 0x1a
     e7a:	ab 8f       	std	Y+27, r26	; 0x1b
     e7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7e:	69 8d       	ldd	r22, Y+25	; 0x19
     e80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	4a e7       	ldi	r20, 0x7A	; 122
     e8c:	53 e4       	ldi	r21, 0x43	; 67
     e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	8d 8b       	std	Y+21, r24	; 0x15
     e98:	9e 8b       	std	Y+22, r25	; 0x16
     e9a:	af 8b       	std	Y+23, r26	; 0x17
     e9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e9e:	6d 89       	ldd	r22, Y+21	; 0x15
     ea0:	7e 89       	ldd	r23, Y+22	; 0x16
     ea2:	8f 89       	ldd	r24, Y+23	; 0x17
     ea4:	98 8d       	ldd	r25, Y+24	; 0x18
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	2c f4       	brge	.+10     	; 0xec0 <clockwiseturn+0x1f2>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9c 8b       	std	Y+20, r25	; 0x14
     ebc:	8b 8b       	std	Y+19, r24	; 0x13
     ebe:	3f c0       	rjmp	.+126    	; 0xf3e <clockwiseturn+0x270>
	else if (__tmp > 65535)
     ec0:	6d 89       	ldd	r22, Y+21	; 0x15
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed4:	18 16       	cp	r1, r24
     ed6:	4c f5       	brge	.+82     	; 0xf2a <clockwiseturn+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed8:	69 8d       	ldd	r22, Y+25	; 0x19
     eda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     edc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ede:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	9c 8b       	std	Y+20, r25	; 0x14
     efe:	8b 8b       	std	Y+19, r24	; 0x13
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <clockwiseturn+0x252>
     f02:	89 e1       	ldi	r24, 0x19	; 25
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9a 8b       	std	Y+18, r25	; 0x12
     f08:	89 8b       	std	Y+17, r24	; 0x11
     f0a:	89 89       	ldd	r24, Y+17	; 0x11
     f0c:	9a 89       	ldd	r25, Y+18	; 0x12
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <clockwiseturn+0x240>
     f12:	9a 8b       	std	Y+18, r25	; 0x12
     f14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	9c 89       	ldd	r25, Y+20	; 0x14
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	9c 8b       	std	Y+20, r25	; 0x14
     f1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f20:	8b 89       	ldd	r24, Y+19	; 0x13
     f22:	9c 89       	ldd	r25, Y+20	; 0x14
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	69 f7       	brne	.-38     	; 0xf02 <clockwiseturn+0x234>
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <clockwiseturn+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2a:	6d 89       	ldd	r22, Y+21	; 0x15
     f2c:	7e 89       	ldd	r23, Y+22	; 0x16
     f2e:	8f 89       	ldd	r24, Y+23	; 0x17
     f30:	98 8d       	ldd	r25, Y+24	; 0x18
     f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9c 8b       	std	Y+20, r25	; 0x14
     f3c:	8b 8b       	std	Y+19, r24	; 0x13
     f3e:	8b 89       	ldd	r24, Y+19	; 0x13
     f40:	9c 89       	ldd	r25, Y+20	; 0x14
     f42:	98 8b       	std	Y+16, r25	; 0x10
     f44:	8f 87       	std	Y+15, r24	; 0x0f
     f46:	8f 85       	ldd	r24, Y+15	; 0x0f
     f48:	98 89       	ldd	r25, Y+16	; 0x10
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <clockwiseturn+0x27c>
     f4e:	98 8b       	std	Y+16, r25	; 0x10
     f50:	8f 87       	std	Y+15, r24	; 0x0f
		{
			if(final_position == clockwise_array[j])
				i = j;
		}
	}
	while(counter < angles)
     f52:	9d a5       	ldd	r25, Y+45	; 0x2d
     f54:	8a a9       	ldd	r24, Y+50	; 0x32
     f56:	98 17       	cp	r25, r24
     f58:	08 f4       	brcc	.+2      	; 0xf5c <clockwiseturn+0x28e>
     f5a:	67 cf       	rjmp	.-306    	; 0xe2a <clockwiseturn+0x15c>
		if (i == 4) /* return to the first element in the array */
			i = 0;
		counter++;
		_delay_ms(50);
	}
	PORTC = (PORTC & 0xC3) | ( clockwise_array[i]<< 2); /* initial Position */
     f5c:	a5 e3       	ldi	r26, 0x35	; 53
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e3       	ldi	r30, 0x35	; 53
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	43 7c       	andi	r20, 0xC3	; 195
     f6a:	8c a5       	ldd	r24, Y+44	; 0x2c
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	ce 01       	movw	r24, r28
     f72:	8e 96       	adiw	r24, 0x2e	; 46
     f74:	fc 01       	movw	r30, r24
     f76:	e2 0f       	add	r30, r18
     f78:	f3 1f       	adc	r31, r19
     f7a:	80 81       	ld	r24, Z
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a8 e4       	ldi	r26, 0x48	; 72
     f92:	b2 e4       	ldi	r27, 0x42	; 66
     f94:	8b 87       	std	Y+11, r24	; 0x0b
     f96:	9c 87       	std	Y+12, r25	; 0x0c
     f98:	ad 87       	std	Y+13, r26	; 0x0d
     f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a e7       	ldi	r20, 0x7A	; 122
     faa:	53 e4       	ldi	r21, 0x43	; 67
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8f 83       	std	Y+7, r24	; 0x07
     fb6:	98 87       	std	Y+8, r25	; 0x08
     fb8:	a9 87       	std	Y+9, r26	; 0x09
     fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbc:	6f 81       	ldd	r22, Y+7	; 0x07
     fbe:	78 85       	ldd	r23, Y+8	; 0x08
     fc0:	89 85       	ldd	r24, Y+9	; 0x09
     fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <clockwiseturn+0x310>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <clockwiseturn+0x38e>
	else if (__tmp > 65535)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <clockwiseturn+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	0f c0       	rjmp	.+30     	; 0x103e <clockwiseturn+0x370>
    1020:	89 e1       	ldi	r24, 0x19	; 25
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <clockwiseturn+0x35e>
    1030:	9c 83       	std	Y+4, r25	; 0x04
    1032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <clockwiseturn+0x352>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <clockwiseturn+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <clockwiseturn+0x39a>
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	final_position = clockwise_array[i];
    1070:	8c a5       	ldd	r24, Y+44	; 0x2c
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	ce 01       	movw	r24, r28
    1078:	8e 96       	adiw	r24, 0x2e	; 46
    107a:	fc 01       	movw	r30, r24
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	80 81       	ld	r24, Z
    1082:	80 93 86 00 	sts	0x0086, r24
}
    1086:	e2 96       	adiw	r28, 0x32	; 50
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <anticlockwiseturn>:
/*
 * Description:
 * Move anti-clockwise.
 */
void anticlockwiseturn(uint8 angles)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	e2 97       	sbiw	r28, 0x32	; 50
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	8a ab       	std	Y+50, r24	; 0x32
	 * counter for looping until reach the angle value
	 * anticlockwise_array to rotate in clockwise direction
	 * i for looping over the anticlockwise_array
	 * j for looping over the array the check which position the motor hold
	 */
	uint8 counter = 0, i, j, anticlockwise_array[4] = {3,6,12,9};
    10ae:	1d a6       	std	Y+45, r1	; 0x2d
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	8e a7       	std	Y+46, r24	; 0x2e
    10b4:	86 e0       	ldi	r24, 0x06	; 6
    10b6:	8f a7       	std	Y+47, r24	; 0x2f
    10b8:	8c e0       	ldi	r24, 0x0C	; 12
    10ba:	88 ab       	std	Y+48, r24	; 0x30
    10bc:	89 e0       	ldi	r24, 0x09	; 9
    10be:	89 ab       	std	Y+49, r24	; 0x31
	if (final_position == 0) /* if the motor didn't move yet */
    10c0:	80 91 86 00 	lds	r24, 0x0086
    10c4:	88 23       	and	r24, r24
    10c6:	09 f0       	breq	.+2      	; 0x10ca <anticlockwiseturn+0x32>
    10c8:	7d c0       	rjmp	.+250    	; 0x11c4 <anticlockwiseturn+0x12c>
	{
		PORTC = (PORTC & 0xC3) | (3 << 2); /* initial Position */
    10ca:	a5 e3       	ldi	r26, 0x35	; 53
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e3       	ldi	r30, 0x35	; 53
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	83 7c       	andi	r24, 0xC3	; 195
    10d6:	8c 60       	ori	r24, 0x0C	; 12
    10d8:	8c 93       	st	X, r24
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a8 e4       	ldi	r26, 0x48	; 72
    10e0:	b2 e4       	ldi	r27, 0x42	; 66
    10e2:	8f a3       	std	Y+39, r24	; 0x27
    10e4:	98 a7       	std	Y+40, r25	; 0x28
    10e6:	a9 a7       	std	Y+41, r26	; 0x29
    10e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8b a3       	std	Y+35, r24	; 0x23
    1104:	9c a3       	std	Y+36, r25	; 0x24
    1106:	ad a3       	std	Y+37, r26	; 0x25
    1108:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <anticlockwiseturn+0x94>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <anticlockwiseturn+0x112>
	else if (__tmp > 65535)
    112c:	6b a1       	ldd	r22, Y+35	; 0x23
    112e:	7c a1       	ldd	r23, Y+36	; 0x24
    1130:	8d a1       	ldd	r24, Y+37	; 0x25
    1132:	9e a1       	ldd	r25, Y+38	; 0x26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <anticlockwiseturn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
    116c:	0f c0       	rjmp	.+30     	; 0x118c <anticlockwiseturn+0xf4>
    116e:	89 e1       	ldi	r24, 0x19	; 25
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
    1176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1178:	98 a1       	ldd	r25, Y+32	; 0x20
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <anticlockwiseturn+0xe2>
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	9a a1       	ldd	r25, Y+34	; 0x22
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a a3       	std	Y+34, r25	; 0x22
    118a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <anticlockwiseturn+0xd6>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <anticlockwiseturn+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	89 a3       	std	Y+33, r24	; 0x21
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <anticlockwiseturn+0x11e>
    11ba:	9e 8f       	std	Y+30, r25	; 0x1e
    11bc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		i = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	8c a7       	std	Y+44, r24	; 0x2c
    11c2:	ac c0       	rjmp	.+344    	; 0x131c <anticlockwiseturn+0x284>
	}
	else{
		/* find the last position and start from it */
		for (j = 0; j <4; j++)
    11c4:	1b a6       	std	Y+43, r1	; 0x2b
    11c6:	12 c0       	rjmp	.+36     	; 0x11ec <anticlockwiseturn+0x154>
		{
			if(final_position == anticlockwise_array[j])
    11c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	ce 01       	movw	r24, r28
    11d0:	8e 96       	adiw	r24, 0x2e	; 46
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 0f       	add	r30, r18
    11d6:	f3 1f       	adc	r31, r19
    11d8:	90 81       	ld	r25, Z
    11da:	80 91 86 00 	lds	r24, 0x0086
    11de:	98 17       	cp	r25, r24
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <anticlockwiseturn+0x14e>
				i = j;
    11e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e4:	8c a7       	std	Y+44, r24	; 0x2c
		_delay_ms(50);
		i = 1;
	}
	else{
		/* find the last position and start from it */
		for (j = 0; j <4; j++)
    11e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	8b a7       	std	Y+43, r24	; 0x2b
    11ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	58 f3       	brcs	.-42     	; 0x11c8 <anticlockwiseturn+0x130>
    11f2:	94 c0       	rjmp	.+296    	; 0x131c <anticlockwiseturn+0x284>
		}
	}
	while(counter < angles)
	{
		/* write on the 4 pins the required value to move the motor */
		PORTC = ((PORTC & 0xC3) | (anticlockwise_array[i] << 2));
    11f4:	a5 e3       	ldi	r26, 0x35	; 53
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e3       	ldi	r30, 0x35	; 53
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	43 7c       	andi	r20, 0xC3	; 195
    1202:	8c a5       	ldd	r24, Y+44	; 0x2c
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	ce 01       	movw	r24, r28
    120a:	8e 96       	adiw	r24, 0x2e	; 46
    120c:	fc 01       	movw	r30, r24
    120e:	e2 0f       	add	r30, r18
    1210:	f3 1f       	adc	r31, r19
    1212:	80 81       	ld	r24, Z
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
		i++;
    1224:	8c a5       	ldd	r24, Y+44	; 0x2c
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	8c a7       	std	Y+44, r24	; 0x2c
		if (i == 4) /* return to the first element in the array */
    122a:	8c a5       	ldd	r24, Y+44	; 0x2c
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	09 f4       	brne	.+2      	; 0x1232 <anticlockwiseturn+0x19a>
			i = 0;
    1230:	1c a6       	std	Y+44, r1	; 0x2c
		counter++;
    1232:	8d a5       	ldd	r24, Y+45	; 0x2d
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	8d a7       	std	Y+45, r24	; 0x2d
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a8 e4       	ldi	r26, 0x48	; 72
    123e:	b2 e4       	ldi	r27, 0x42	; 66
    1240:	89 8f       	std	Y+25, r24	; 0x19
    1242:	9a 8f       	std	Y+26, r25	; 0x1a
    1244:	ab 8f       	std	Y+27, r26	; 0x1b
    1246:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1248:	69 8d       	ldd	r22, Y+25	; 0x19
    124a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    124c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4a e7       	ldi	r20, 0x7A	; 122
    1256:	53 e4       	ldi	r21, 0x43	; 67
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	8d 8b       	std	Y+21, r24	; 0x15
    1262:	9e 8b       	std	Y+22, r25	; 0x16
    1264:	af 8b       	std	Y+23, r26	; 0x17
    1266:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1268:	6d 89       	ldd	r22, Y+21	; 0x15
    126a:	7e 89       	ldd	r23, Y+22	; 0x16
    126c:	8f 89       	ldd	r24, Y+23	; 0x17
    126e:	98 8d       	ldd	r25, Y+24	; 0x18
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <anticlockwiseturn+0x1f2>
		__ticks = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9c 8b       	std	Y+20, r25	; 0x14
    1286:	8b 8b       	std	Y+19, r24	; 0x13
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <anticlockwiseturn+0x270>
	else if (__tmp > 65535)
    128a:	6d 89       	ldd	r22, Y+21	; 0x15
    128c:	7e 89       	ldd	r23, Y+22	; 0x16
    128e:	8f 89       	ldd	r24, Y+23	; 0x17
    1290:	98 8d       	ldd	r25, Y+24	; 0x18
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	3f ef       	ldi	r19, 0xFF	; 255
    1296:	4f e7       	ldi	r20, 0x7F	; 127
    1298:	57 e4       	ldi	r21, 0x47	; 71
    129a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129e:	18 16       	cp	r1, r24
    12a0:	4c f5       	brge	.+82     	; 0x12f4 <anticlockwiseturn+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	69 8d       	ldd	r22, Y+25	; 0x19
    12a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9c 8b       	std	Y+20, r25	; 0x14
    12c8:	8b 8b       	std	Y+19, r24	; 0x13
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <anticlockwiseturn+0x252>
    12cc:	89 e1       	ldi	r24, 0x19	; 25
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9a 8b       	std	Y+18, r25	; 0x12
    12d2:	89 8b       	std	Y+17, r24	; 0x11
    12d4:	89 89       	ldd	r24, Y+17	; 0x11
    12d6:	9a 89       	ldd	r25, Y+18	; 0x12
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <anticlockwiseturn+0x240>
    12dc:	9a 8b       	std	Y+18, r25	; 0x12
    12de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	8b 89       	ldd	r24, Y+19	; 0x13
    12e2:	9c 89       	ldd	r25, Y+20	; 0x14
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9c 8b       	std	Y+20, r25	; 0x14
    12e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	9c 89       	ldd	r25, Y+20	; 0x14
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	69 f7       	brne	.-38     	; 0x12cc <anticlockwiseturn+0x234>
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <anticlockwiseturn+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	6d 89       	ldd	r22, Y+21	; 0x15
    12f6:	7e 89       	ldd	r23, Y+22	; 0x16
    12f8:	8f 89       	ldd	r24, Y+23	; 0x17
    12fa:	98 8d       	ldd	r25, Y+24	; 0x18
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
    1308:	8b 89       	ldd	r24, Y+19	; 0x13
    130a:	9c 89       	ldd	r25, Y+20	; 0x14
    130c:	98 8b       	std	Y+16, r25	; 0x10
    130e:	8f 87       	std	Y+15, r24	; 0x0f
    1310:	8f 85       	ldd	r24, Y+15	; 0x0f
    1312:	98 89       	ldd	r25, Y+16	; 0x10
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <anticlockwiseturn+0x27c>
    1318:	98 8b       	std	Y+16, r25	; 0x10
    131a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			if(final_position == anticlockwise_array[j])
				i = j;
		}
	}
	while(counter < angles)
    131c:	9d a5       	ldd	r25, Y+45	; 0x2d
    131e:	8a a9       	ldd	r24, Y+50	; 0x32
    1320:	98 17       	cp	r25, r24
    1322:	08 f4       	brcc	.+2      	; 0x1326 <anticlockwiseturn+0x28e>
    1324:	67 cf       	rjmp	.-306    	; 0x11f4 <anticlockwiseturn+0x15c>
		if (i == 4) /* return to the first element in the array */
			i = 0;
		counter++;
		_delay_ms(50);
	}
	PORTC = ((PORTC & 0xC3) | (anticlockwise_array[i] << 2)); /* initial Position */
    1326:	a5 e3       	ldi	r26, 0x35	; 53
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e3       	ldi	r30, 0x35	; 53
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	43 7c       	andi	r20, 0xC3	; 195
    1334:	8c a5       	ldd	r24, Y+44	; 0x2c
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	ce 01       	movw	r24, r28
    133c:	8e 96       	adiw	r24, 0x2e	; 46
    133e:	fc 01       	movw	r30, r24
    1340:	e2 0f       	add	r30, r18
    1342:	f3 1f       	adc	r31, r19
    1344:	80 81       	ld	r24, Z
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a8 e4       	ldi	r26, 0x48	; 72
    135c:	b2 e4       	ldi	r27, 0x42	; 66
    135e:	8b 87       	std	Y+11, r24	; 0x0b
    1360:	9c 87       	std	Y+12, r25	; 0x0c
    1362:	ad 87       	std	Y+13, r26	; 0x0d
    1364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	6b 85       	ldd	r22, Y+11	; 0x0b
    1368:	7c 85       	ldd	r23, Y+12	; 0x0c
    136a:	8d 85       	ldd	r24, Y+13	; 0x0d
    136c:	9e 85       	ldd	r25, Y+14	; 0x0e
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a e7       	ldi	r20, 0x7A	; 122
    1374:	53 e4       	ldi	r21, 0x43	; 67
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8f 83       	std	Y+7, r24	; 0x07
    1380:	98 87       	std	Y+8, r25	; 0x08
    1382:	a9 87       	std	Y+9, r26	; 0x09
    1384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <anticlockwiseturn+0x310>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <anticlockwiseturn+0x38e>
	else if (__tmp > 65535)
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	4c f5       	brge	.+82     	; 0x1412 <anticlockwiseturn+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <anticlockwiseturn+0x370>
    13ea:	89 e1       	ldi	r24, 0x19	; 25
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <anticlockwiseturn+0x35e>
    13fa:	9c 83       	std	Y+4, r25	; 0x04
    13fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <anticlockwiseturn+0x352>
    1410:	14 c0       	rjmp	.+40     	; 0x143a <anticlockwiseturn+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <anticlockwiseturn+0x39a>
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	final_position = anticlockwise_array[i];
    143a:	8c a5       	ldd	r24, Y+44	; 0x2c
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	8e 96       	adiw	r24, 0x2e	; 46
    1444:	fc 01       	movw	r30, r24
    1446:	e2 0f       	add	r30, r18
    1448:	f3 1f       	adc	r31, r19
    144a:	80 81       	ld	r24, Z
    144c:	80 93 86 00 	sts	0x0086, r24
}
    1450:	e2 96       	adiw	r28, 0x32	; 50
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <GPIO_setupPinDirection+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <GPIO_setupPinDirection+0x8>
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
    1474:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	08 f0       	brcs	.+2      	; 0x147e <GPIO_setupPinDirection+0x1c>
    147c:	d5 c0       	rjmp	.+426    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	08 f0       	brcs	.+2      	; 0x1486 <GPIO_setupPinDirection+0x24>
    1484:	d1 c0       	rjmp	.+418    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3d 83       	std	Y+5, r19	; 0x05
    148e:	2c 83       	std	Y+4, r18	; 0x04
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <GPIO_setupPinDirection+0x3a>
    149a:	43 c0       	rjmp	.+134    	; 0x1522 <GPIO_setupPinDirection+0xc0>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <GPIO_setupPinDirection+0x4e>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	71 f0       	breq	.+28     	; 0x14ca <GPIO_setupPinDirection+0x68>
    14ae:	bc c0       	rjmp	.+376    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <GPIO_setupPinDirection+0x5a>
    14ba:	5f c0       	rjmp	.+190    	; 0x157a <GPIO_setupPinDirection+0x118>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <GPIO_setupPinDirection+0x66>
    14c6:	85 c0       	rjmp	.+266    	; 0x15d2 <GPIO_setupPinDirection+0x170>
    14c8:	af c0       	rjmp	.+350    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	a1 f4       	brne	.+40     	; 0x14f8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14d0:	aa e3       	ldi	r26, 0x3A	; 58
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ea e3       	ldi	r30, 0x3A	; 58
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GPIO_setupPinDirection+0x8c>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GPIO_setupPinDirection+0x88>
    14f2:	84 2b       	or	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	98 c0       	rjmp	.+304    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14f8:	aa e3       	ldi	r26, 0x3A	; 58
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_setupPinDirection+0xb4>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_setupPinDirection+0xb0>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	83 c0       	rjmp	.+262    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	a1 f4       	brne	.+40     	; 0x1550 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_setupPinDirection+0xe4>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_setupPinDirection+0xe0>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	6c c0       	rjmp	.+216    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1550:	a7 e3       	ldi	r26, 0x37	; 55
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_setupPinDirection+0x10c>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_setupPinDirection+0x108>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	57 c0       	rjmp	.+174    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1580:	a4 e3       	ldi	r26, 0x34	; 52
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e4 e3       	ldi	r30, 0x34	; 52
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_setupPinDirection+0x13c>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_setupPinDirection+0x138>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	40 c0       	rjmp	.+128    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_setupPinDirection+0x164>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_setupPinDirection+0x160>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	2b c0       	rjmp	.+86     	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15d8:	a1 e3       	ldi	r26, 0x31	; 49
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_setupPinDirection+0x194>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_setupPinDirection+0x190>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1600:	a1 e3       	ldi	r26, 0x31	; 49
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e1 e3       	ldi	r30, 0x31	; 49
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_setupPinDirection+0x1bc>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_setupPinDirection+0x1b8>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePin+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_writePin+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
    164a:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	08 f0       	brcs	.+2      	; 0x1654 <GPIO_writePin+0x1c>
    1652:	d5 c0       	rjmp	.+426    	; 0x17fe <GPIO_writePin+0x1c6>
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f0       	brcs	.+2      	; 0x165c <GPIO_writePin+0x24>
    165a:	d1 c0       	rjmp	.+418    	; 0x17fe <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch (port_num)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <GPIO_writePin+0x3a>
    1670:	43 c0       	rjmp	.+134    	; 0x16f8 <GPIO_writePin+0xc0>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <GPIO_writePin+0x4e>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	71 f0       	breq	.+28     	; 0x16a0 <GPIO_writePin+0x68>
    1684:	bc c0       	rjmp	.+376    	; 0x17fe <GPIO_writePin+0x1c6>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <GPIO_writePin+0x5a>
    1690:	5f c0       	rjmp	.+190    	; 0x1750 <GPIO_writePin+0x118>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_writePin+0x66>
    169c:	85 c0       	rjmp	.+266    	; 0x17a8 <GPIO_writePin+0x170>
    169e:	af c0       	rjmp	.+350    	; 0x17fe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <GPIO_writePin+0x96>
						{
							SET_BIT(PORTA,pin_num);
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_writePin+0x8c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_writePin+0x88>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	98 c0       	rjmp	.+304    	; 0x17fe <GPIO_writePin+0x1c6>
						}
						else
						{
							CLEAR_BIT(PORTA,pin_num);
    16ce:	ab e3       	ldi	r26, 0x3B	; 59
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb e3       	ldi	r30, 0x3B	; 59
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_writePin+0xb4>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_writePin+0xb0>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	83 c0       	rjmp	.+262    	; 0x17fe <GPIO_writePin+0x1c6>
						}
			break;
		case PORTB_ID :
					if(value == LOGIC_HIGH)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_writePin+0xee>
								{
									SET_BIT(PORTB,pin_num);
    16fe:	a8 e3       	ldi	r26, 0x38	; 56
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_writePin+0xe4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_writePin+0xe0>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	6c c0       	rjmp	.+216    	; 0x17fe <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTB,pin_num);
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_writePin+0x10c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_writePin+0x108>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	57 c0       	rjmp	.+174    	; 0x17fe <GPIO_writePin+0x1c6>
								}
					break;
		case PORTC_ID :
					if(value == LOGIC_HIGH)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <GPIO_writePin+0x146>
								{
									SET_BIT(PORTC,pin_num);
    1756:	a5 e3       	ldi	r26, 0x35	; 53
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e3       	ldi	r30, 0x35	; 53
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_writePin+0x13c>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_writePin+0x138>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	40 c0       	rjmp	.+128    	; 0x17fe <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTC,pin_num);
    177e:	a5 e3       	ldi	r26, 0x35	; 53
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_writePin+0x164>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_writePin+0x160>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	2b c0       	rjmp	.+86     	; 0x17fe <GPIO_writePin+0x1c6>
								}
					break;
		case PORTD_ID :
					if(value == LOGIC_HIGH)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_writePin+0x19e>
								{
									SET_BIT(PORTD,pin_num);
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0x194>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0x190>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTD,pin_num);
    17d6:	a2 e3       	ldi	r26, 0x32	; 50
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_writePin+0x1bc>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_writePin+0x1b8>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
								}
					break;
		}
	}

}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <GPIO_readPin+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_readPin+0x8>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    1820:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 30       	cpi	r24, 0x08	; 8
    1826:	08 f0       	brcs	.+2      	; 0x182a <GPIO_readPin+0x1c>
    1828:	84 c0       	rjmp	.+264    	; 0x1932 <GPIO_readPin+0x124>
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	08 f0       	brcs	.+2      	; 0x1832 <GPIO_readPin+0x24>
    1830:	80 c0       	rjmp	.+256    	; 0x1932 <GPIO_readPin+0x124>
			{
				/* Do nothing */
			}
	else
	{
		switch(port_num)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3d 83       	std	Y+5, r19	; 0x05
    183a:	2c 83       	std	Y+4, r18	; 0x04
    183c:	4c 81       	ldd	r20, Y+4	; 0x04
    183e:	5d 81       	ldd	r21, Y+5	; 0x05
    1840:	41 30       	cpi	r20, 0x01	; 1
    1842:	51 05       	cpc	r21, r1
    1844:	79 f1       	breq	.+94     	; 0x18a4 <GPIO_readPin+0x96>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	91 05       	cpc	r25, r1
    184e:	34 f4       	brge	.+12     	; 0x185c <GPIO_readPin+0x4e>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	69 f0       	breq	.+26     	; 0x1874 <GPIO_readPin+0x66>
    185a:	6b c0       	rjmp	.+214    	; 0x1932 <GPIO_readPin+0x124>
    185c:	4c 81       	ldd	r20, Y+4	; 0x04
    185e:	5d 81       	ldd	r21, Y+5	; 0x05
    1860:	42 30       	cpi	r20, 0x02	; 2
    1862:	51 05       	cpc	r21, r1
    1864:	b9 f1       	breq	.+110    	; 0x18d4 <GPIO_readPin+0xc6>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <GPIO_readPin+0x64>
    1870:	49 c0       	rjmp	.+146    	; 0x1904 <GPIO_readPin+0xf6>
    1872:	5f c0       	rjmp	.+190    	; 0x1932 <GPIO_readPin+0x124>
		{
		case PORTA_ID : if(BIT_IS_SET(PINA,pin_num))
    1874:	e9 e3       	ldi	r30, 0x39	; 57
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <GPIO_readPin+0x7e>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <GPIO_readPin+0x7a>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	88 23       	and	r24, r24
    1898:	19 f0       	breq	.+6      	; 0x18a0 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH ;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	49 c0       	rjmp	.+146    	; 0x1932 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	47 c0       	rjmp	.+142    	; 0x1932 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID : if(BIT_IS_SET(PINB,pin_num))
    18a4:	e6 e3       	ldi	r30, 0x36	; 54
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_readPin+0xae>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_readPin+0xaa>
    18c0:	ca 01       	movw	r24, r20
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	88 23       	and	r24, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH ;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	31 c0       	rjmp	.+98     	; 0x1932 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    18d0:	19 82       	std	Y+1, r1	; 0x01
    18d2:	2f c0       	rjmp	.+94     	; 0x1932 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID : if(BIT_IS_SET(PINC,pin_num))
    18d4:	e3 e3       	ldi	r30, 0x33	; 51
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_readPin+0xde>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_readPin+0xda>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	88 23       	and	r24, r24
    18f8:	19 f0       	breq	.+6      	; 0x1900 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH ;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	19 c0       	rjmp	.+50     	; 0x1932 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	17 c0       	rjmp	.+46     	; 0x1932 <GPIO_readPin+0x124>
		}
		break;

		case PORTD_ID : if(BIT_IS_SET(PIND,pin_num))
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_readPin+0x10e>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_readPin+0x10a>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH ;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1930:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
    return pin_value ;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <GPIO_setupPortDirection+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <GPIO_setupPortDirection+0x8>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	90 f5       	brcc	.+100    	; 0x19be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3c 83       	std	Y+4, r19	; 0x04
    1962:	2b 83       	std	Y+3, r18	; 0x03
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	91 05       	cpc	r25, r1
    196c:	d1 f0       	breq	.+52     	; 0x19a2 <GPIO_setupPortDirection+0x5e>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	2c f4       	brge	.+10     	; 0x1982 <GPIO_setupPortDirection+0x3e>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	61 f0       	breq	.+24     	; 0x1998 <GPIO_setupPortDirection+0x54>
    1980:	1e c0       	rjmp	.+60     	; 0x19be <GPIO_setupPortDirection+0x7a>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <GPIO_setupPortDirection+0x68>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	91 05       	cpc	r25, r1
    1994:	81 f0       	breq	.+32     	; 0x19b6 <GPIO_setupPortDirection+0x72>
    1996:	13 c0       	rjmp	.+38     	; 0x19be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19a2:	e7 e3       	ldi	r30, 0x37	; 55
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19ac:	e4 e3       	ldi	r30, 0x34	; 52
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19b6:	e1 e3       	ldi	r30, 0x31	; 49
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num , uint8 value)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <GPIO_writePort+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <GPIO_writePort+0x8>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	84 30       	cpi	r24, 0x04	; 4
    19e0:	90 f5       	brcc	.+100    	; 0x1a46 <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
	else
	{
	  switch (port_num)
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	d1 f0       	breq	.+52     	; 0x1a2a <GPIO_writePort+0x5e>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <GPIO_writePort+0x3e>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <GPIO_writePort+0x54>
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <GPIO_writePort+0x7a>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <GPIO_writePort+0x68>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <GPIO_writePort+0x72>
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <GPIO_writePort+0x7a>
	  {
	  case PORTA_ID : PORTA = value;
    1a20:	eb e3       	ldi	r30, 0x3B	; 59
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <GPIO_writePort+0x7a>
	  break;
	  case PORTB_ID : PORTB = value;
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <GPIO_writePort+0x7a>
	  break;
	  case PORTC_ID : PORTC = value;
    1a34:	e5 e3       	ldi	r30, 0x35	; 53
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <GPIO_writePort+0x7a>
	  break;
	  case PORTD_ID : PORTD = value;
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
	  break;

	  }
	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	67 e0       	ldi	r22, 0x07	; 7
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	6f ef       	ldi	r22, 0xFF	; 255
    1a7e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1a82:	88 e3       	ldi	r24, 0x38	; 56
    1a84:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a88:	8c e0       	ldi	r24, 0x0C	; 12
    1a8a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <LCD_sendCommand>
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ea 97       	sbiw	r28, 0x3a	; 58
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1ab0:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a0 e8       	ldi	r26, 0x80	; 128
    1acc:	bf e3       	ldi	r27, 0x3F	; 63
    1ace:	8d ab       	std	Y+53, r24	; 0x35
    1ad0:	9e ab       	std	Y+54, r25	; 0x36
    1ad2:	af ab       	std	Y+55, r26	; 0x37
    1ad4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad8:	7e a9       	ldd	r23, Y+54	; 0x36
    1ada:	8f a9       	ldd	r24, Y+55	; 0x37
    1adc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	53 e4       	ldi	r21, 0x43	; 67
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	89 ab       	std	Y+49, r24	; 0x31
    1af0:	9a ab       	std	Y+50, r25	; 0x32
    1af2:	ab ab       	std	Y+51, r26	; 0x33
    1af4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1af6:	69 a9       	ldd	r22, Y+49	; 0x31
    1af8:	7a a9       	ldd	r23, Y+50	; 0x32
    1afa:	8b a9       	ldd	r24, Y+51	; 0x33
    1afc:	9c a9       	ldd	r25, Y+52	; 0x34
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	98 ab       	std	Y+48, r25	; 0x30
    1b14:	8f a7       	std	Y+47, r24	; 0x2f
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1b18:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	6d a9       	ldd	r22, Y+53	; 0x35
    1b32:	7e a9       	ldd	r23, Y+54	; 0x36
    1b34:	8f a9       	ldd	r24, Y+55	; 0x37
    1b36:	98 ad       	ldd	r25, Y+56	; 0x38
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <LCD_sendCommand+0xde>
    1b5a:	89 e1       	ldi	r24, 0x19	; 25
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9e a7       	std	Y+46, r25	; 0x2e
    1b60:	8d a7       	std	Y+45, r24	; 0x2d
    1b62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_sendCommand+0xcc>
    1b6a:	9e a7       	std	Y+46, r25	; 0x2e
    1b6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b70:	98 a9       	ldd	r25, Y+48	; 0x30
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <LCD_sendCommand+0xc0>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	69 a9       	ldd	r22, Y+49	; 0x31
    1b84:	7a a9       	ldd	r23, Y+50	; 0x32
    1b86:	8b a9       	ldd	r24, Y+51	; 0x33
    1b88:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	98 ab       	std	Y+48, r25	; 0x30
    1b94:	8f a7       	std	Y+47, r24	; 0x2f
    1b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b98:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9a:	9c a7       	std	Y+44, r25	; 0x2c
    1b9c:	8b a7       	std	Y+43, r24	; 0x2b
    1b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_sendCommand+0x108>
    1ba6:	9c a7       	std	Y+44, r25	; 0x2c
    1ba8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	67 e0       	ldi	r22, 0x07	; 7
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e8       	ldi	r26, 0x80	; 128
    1bba:	bf e3       	ldi	r27, 0x3F	; 63
    1bbc:	8f a3       	std	Y+39, r24	; 0x27
    1bbe:	98 a7       	std	Y+40, r25	; 0x28
    1bc0:	a9 a7       	std	Y+41, r26	; 0x29
    1bc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8b a3       	std	Y+35, r24	; 0x23
    1bde:	9c a3       	std	Y+36, r25	; 0x24
    1be0:	ad a3       	std	Y+37, r26	; 0x25
    1be2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be4:	6b a1       	ldd	r22, Y+35	; 0x23
    1be6:	7c a1       	ldd	r23, Y+36	; 0x24
    1be8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bea:	9e a1       	ldd	r25, Y+38	; 0x26
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9a a3       	std	Y+34, r25	; 0x22
    1c02:	89 a3       	std	Y+33, r24	; 0x21
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c20:	78 a5       	ldd	r23, Y+40	; 0x28
    1c22:	89 a5       	ldd	r24, Y+41	; 0x29
    1c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <LCD_sendCommand+0x1cc>
    1c48:	89 e1       	ldi	r24, 0x19	; 25
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	98 a3       	std	Y+32, r25	; 0x20
    1c4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c52:	98 a1       	ldd	r25, Y+32	; 0x20
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_sendCommand+0x1ba>
    1c58:	98 a3       	std	Y+32, r25	; 0x20
    1c5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9a a3       	std	Y+34, r25	; 0x22
    1c64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <LCD_sendCommand+0x1ae>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6b a1       	ldd	r22, Y+35	; 0x23
    1c72:	7c a1       	ldd	r23, Y+36	; 0x24
    1c74:	8d a1       	ldd	r24, Y+37	; 0x25
    1c76:	9e a1       	ldd	r25, Y+38	; 0x26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
    1c84:	89 a1       	ldd	r24, Y+33	; 0x21
    1c86:	9a a1       	ldd	r25, Y+34	; 0x22
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_sendCommand+0x1f6>
    1c94:	9e 8f       	std	Y+30, r25	; 0x1e
    1c96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c9c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GPIO_writePort>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e8       	ldi	r26, 0x80	; 128
    1ca6:	bf e3       	ldi	r27, 0x3F	; 63
    1ca8:	89 8f       	std	Y+25, r24	; 0x19
    1caa:	9a 8f       	std	Y+26, r25	; 0x1a
    1cac:	ab 8f       	std	Y+27, r26	; 0x1b
    1cae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a e7       	ldi	r20, 0x7A	; 122
    1cbe:	53 e4       	ldi	r21, 0x43	; 67
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8d 8b       	std	Y+21, r24	; 0x15
    1cca:	9e 8b       	std	Y+22, r25	; 0x16
    1ccc:	af 8b       	std	Y+23, r26	; 0x17
    1cce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <LCD_sendCommand+0x258>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9c 8b       	std	Y+20, r25	; 0x14
    1cee:	8b 8b       	std	Y+19, r24	; 0x13
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <LCD_sendCommand+0x2b8>
    1d34:	89 e1       	ldi	r24, 0x19	; 25
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
    1d3c:	89 89       	ldd	r24, Y+17	; 0x11
    1d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_sendCommand+0x2a6>
    1d44:	9a 8b       	std	Y+18, r25	; 0x12
    1d46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <LCD_sendCommand+0x29a>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	8b 89       	ldd	r24, Y+19	; 0x13
    1d72:	9c 89       	ldd	r25, Y+20	; 0x14
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
    1d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7a:	98 89       	ldd	r25, Y+16	; 0x10
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_sendCommand+0x2e2>
    1d80:	98 8b       	std	Y+16, r25	; 0x10
    1d82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	67 e0       	ldi	r22, 0x07	; 7
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	8b 87       	std	Y+11, r24	; 0x0b
    1d98:	9c 87       	std	Y+12, r25	; 0x0c
    1d9a:	ad 87       	std	Y+13, r26	; 0x0d
    1d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a e7       	ldi	r20, 0x7A	; 122
    1dac:	53 e4       	ldi	r21, 0x43	; 67
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8f 83       	std	Y+7, r24	; 0x07
    1db8:	98 87       	std	Y+8, r25	; 0x08
    1dba:	a9 87       	std	Y+9, r26	; 0x09
    1dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <LCD_sendCommand+0x346>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <LCD_sendCommand+0x3a6>
    1e22:	89 e1       	ldi	r24, 0x19	; 25
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_sendCommand+0x394>
    1e32:	9c 83       	std	Y+4, r25	; 0x04
    1e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <LCD_sendCommand+0x388>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_sendCommand+0x3d0>
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e72:	ea 96       	adiw	r28, 0x3a	; 58
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	ea 97       	sbiw	r28, 0x3a	; 58
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1e9a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e8       	ldi	r26, 0x80	; 128
    1eb6:	bf e3       	ldi	r27, 0x3F	; 63
    1eb8:	8d ab       	std	Y+53, r24	; 0x35
    1eba:	9e ab       	std	Y+54, r25	; 0x36
    1ebc:	af ab       	std	Y+55, r26	; 0x37
    1ebe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a e7       	ldi	r20, 0x7A	; 122
    1ece:	53 e4       	ldi	r21, 0x43	; 67
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	89 ab       	std	Y+49, r24	; 0x31
    1eda:	9a ab       	std	Y+50, r25	; 0x32
    1edc:	ab ab       	std	Y+51, r26	; 0x33
    1ede:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	98 ab       	std	Y+48, r25	; 0x30
    1efe:	8f a7       	std	Y+47, r24	; 0x2f
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1f02:	69 a9       	ldd	r22, Y+49	; 0x31
    1f04:	7a a9       	ldd	r23, Y+50	; 0x32
    1f06:	8b a9       	ldd	r24, Y+51	; 0x33
    1f08:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f20:	98 ad       	ldd	r25, Y+56	; 0x38
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	98 ab       	std	Y+48, r25	; 0x30
    1f40:	8f a7       	std	Y+47, r24	; 0x2f
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_displayCharacter+0xde>
    1f44:	89 e1       	ldi	r24, 0x19	; 25
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9e a7       	std	Y+46, r25	; 0x2e
    1f4a:	8d a7       	std	Y+45, r24	; 0x2d
    1f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_displayCharacter+0xcc>
    1f54:	9e a7       	std	Y+46, r25	; 0x2e
    1f56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_displayCharacter+0xc0>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f70:	8b a9       	ldd	r24, Y+51	; 0x33
    1f72:	9c a9       	ldd	r25, Y+52	; 0x34
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f82:	98 a9       	ldd	r25, Y+48	; 0x30
    1f84:	9c a7       	std	Y+44, r25	; 0x2c
    1f86:	8b a7       	std	Y+43, r24	; 0x2b
    1f88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_displayCharacter+0x108>
    1f90:	9c a7       	std	Y+44, r25	; 0x2c
    1f92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	67 e0       	ldi	r22, 0x07	; 7
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a0 e8       	ldi	r26, 0x80	; 128
    1fa4:	bf e3       	ldi	r27, 0x3F	; 63
    1fa6:	8f a3       	std	Y+39, r24	; 0x27
    1fa8:	98 a7       	std	Y+40, r25	; 0x28
    1faa:	a9 a7       	std	Y+41, r26	; 0x29
    1fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a e7       	ldi	r20, 0x7A	; 122
    1fbc:	53 e4       	ldi	r21, 0x43	; 67
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8b a3       	std	Y+35, r24	; 0x23
    1fc8:	9c a3       	std	Y+36, r25	; 0x24
    1fca:	ad a3       	std	Y+37, r26	; 0x25
    1fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fce:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9a a3       	std	Y+34, r25	; 0x22
    1fec:	89 a3       	std	Y+33, r24	; 0x21
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6f a1       	ldd	r22, Y+39	; 0x27
    200a:	78 a5       	ldd	r23, Y+40	; 0x28
    200c:	89 a5       	ldd	r24, Y+41	; 0x29
    200e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9a a3       	std	Y+34, r25	; 0x22
    202e:	89 a3       	std	Y+33, r24	; 0x21
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <LCD_displayCharacter+0x1cc>
    2032:	89 e1       	ldi	r24, 0x19	; 25
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	98 a3       	std	Y+32, r25	; 0x20
    2038:	8f 8f       	std	Y+31, r24	; 0x1f
    203a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    203c:	98 a1       	ldd	r25, Y+32	; 0x20
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_displayCharacter+0x1ba>
    2042:	98 a3       	std	Y+32, r25	; 0x20
    2044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	89 a1       	ldd	r24, Y+33	; 0x21
    2048:	9a a1       	ldd	r25, Y+34	; 0x22
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9a a3       	std	Y+34, r25	; 0x22
    204e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	89 a1       	ldd	r24, Y+33	; 0x21
    2052:	9a a1       	ldd	r25, Y+34	; 0x22
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <LCD_displayCharacter+0x1ae>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6b a1       	ldd	r22, Y+35	; 0x23
    205c:	7c a1       	ldd	r23, Y+36	; 0x24
    205e:	8d a1       	ldd	r24, Y+37	; 0x25
    2060:	9e a1       	ldd	r25, Y+38	; 0x26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9a a3       	std	Y+34, r25	; 0x22
    206c:	89 a3       	std	Y+33, r24	; 0x21
    206e:	89 a1       	ldd	r24, Y+33	; 0x21
    2070:	9a a1       	ldd	r25, Y+34	; 0x22
    2072:	9e 8f       	std	Y+30, r25	; 0x1e
    2074:	8d 8f       	std	Y+29, r24	; 0x1d
    2076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_displayCharacter+0x1f6>
    207e:	9e 8f       	std	Y+30, r25	; 0x1e
    2080:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	6a ad       	ldd	r22, Y+58	; 0x3a
    2086:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GPIO_writePort>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e8       	ldi	r26, 0x80	; 128
    2090:	bf e3       	ldi	r27, 0x3F	; 63
    2092:	89 8f       	std	Y+25, r24	; 0x19
    2094:	9a 8f       	std	Y+26, r25	; 0x1a
    2096:	ab 8f       	std	Y+27, r26	; 0x1b
    2098:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209a:	69 8d       	ldd	r22, Y+25	; 0x19
    209c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4a e7       	ldi	r20, 0x7A	; 122
    20a8:	53 e4       	ldi	r21, 0x43	; 67
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	8d 8b       	std	Y+21, r24	; 0x15
    20b4:	9e 8b       	std	Y+22, r25	; 0x16
    20b6:	af 8b       	std	Y+23, r26	; 0x17
    20b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ba:	6d 89       	ldd	r22, Y+21	; 0x15
    20bc:	7e 89       	ldd	r23, Y+22	; 0x16
    20be:	8f 89       	ldd	r24, Y+23	; 0x17
    20c0:	98 8d       	ldd	r25, Y+24	; 0x18
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	2c f4       	brge	.+10     	; 0x20dc <LCD_displayCharacter+0x258>
		__ticks = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9c 8b       	std	Y+20, r25	; 0x14
    20d8:	8b 8b       	std	Y+19, r24	; 0x13
    20da:	3f c0       	rjmp	.+126    	; 0x215a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	3f ef       	ldi	r19, 0xFF	; 255
    20e8:	4f e7       	ldi	r20, 0x7F	; 127
    20ea:	57 e4       	ldi	r21, 0x47	; 71
    20ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f0:	18 16       	cp	r1, r24
    20f2:	4c f5       	brge	.+82     	; 0x2146 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f4:	69 8d       	ldd	r22, Y+25	; 0x19
    20f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
    211c:	0f c0       	rjmp	.+30     	; 0x213c <LCD_displayCharacter+0x2b8>
    211e:	89 e1       	ldi	r24, 0x19	; 25
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	89 8b       	std	Y+17, r24	; 0x11
    2126:	89 89       	ldd	r24, Y+17	; 0x11
    2128:	9a 89       	ldd	r25, Y+18	; 0x12
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_displayCharacter+0x2a6>
    212e:	9a 8b       	std	Y+18, r25	; 0x12
    2130:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2132:	8b 89       	ldd	r24, Y+19	; 0x13
    2134:	9c 89       	ldd	r25, Y+20	; 0x14
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	69 f7       	brne	.-38     	; 0x211e <LCD_displayCharacter+0x29a>
    2144:	14 c0       	rjmp	.+40     	; 0x216e <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9c 8b       	std	Y+20, r25	; 0x14
    2158:	8b 8b       	std	Y+19, r24	; 0x13
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	98 8b       	std	Y+16, r25	; 0x10
    2160:	8f 87       	std	Y+15, r24	; 0x0f
    2162:	8f 85       	ldd	r24, Y+15	; 0x0f
    2164:	98 89       	ldd	r25, Y+16	; 0x10
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_displayCharacter+0x2e2>
    216a:	98 8b       	std	Y+16, r25	; 0x10
    216c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	67 e0       	ldi	r22, 0x07	; 7
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e8       	ldi	r26, 0x80	; 128
    217e:	bf e3       	ldi	r27, 0x3F	; 63
    2180:	8b 87       	std	Y+11, r24	; 0x0b
    2182:	9c 87       	std	Y+12, r25	; 0x0c
    2184:	ad 87       	std	Y+13, r26	; 0x0d
    2186:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	6b 85       	ldd	r22, Y+11	; 0x0b
    218a:	7c 85       	ldd	r23, Y+12	; 0x0c
    218c:	8d 85       	ldd	r24, Y+13	; 0x0d
    218e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	4a e7       	ldi	r20, 0x7A	; 122
    2196:	53 e4       	ldi	r21, 0x43	; 67
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	8f 83       	std	Y+7, r24	; 0x07
    21a2:	98 87       	std	Y+8, r25	; 0x08
    21a4:	a9 87       	std	Y+9, r26	; 0x09
    21a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a8:	6f 81       	ldd	r22, Y+7	; 0x07
    21aa:	78 85       	ldd	r23, Y+8	; 0x08
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <LCD_displayCharacter+0x346>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	3f c0       	rjmp	.+126    	; 0x2248 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	4c f5       	brge	.+82     	; 0x2234 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e2       	ldi	r20, 0x20	; 32
    21f0:	51 e4       	ldi	r21, 0x41	; 65
    21f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	0f c0       	rjmp	.+30     	; 0x222a <LCD_displayCharacter+0x3a6>
    220c:	89 e1       	ldi	r24, 0x19	; 25
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_displayCharacter+0x394>
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	69 f7       	brne	.-38     	; 0x220c <LCD_displayCharacter+0x388>
    2232:	14 c0       	rjmp	.+40     	; 0x225c <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	6f 81       	ldd	r22, Y+7	; 0x07
    2236:	78 85       	ldd	r23, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_displayCharacter+0x3d0>
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    225c:	ea 96       	adiw	r28, 0x3a	; 58
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <LCD_displayString+0x6>
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	9b 83       	std	Y+3, r25	; 0x03
    227c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    227e:	19 82       	std	Y+1, r1	; 0x01
    2280:	0e c0       	rjmp	.+28     	; 0x229e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	9b 81       	ldd	r25, Y+3	; 0x03
    228c:	fc 01       	movw	r30, r24
    228e:	e2 0f       	add	r30, r18
    2290:	f3 1f       	adc	r31, r19
    2292:	80 81       	ld	r24, Z
    2294:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
		i++;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	fc 01       	movw	r30, r24
    22aa:	e2 0f       	add	r30, r18
    22ac:	f3 1f       	adc	r31, r19
    22ae:	80 81       	ld	r24, Z
    22b0:	88 23       	and	r24, r24
    22b2:	39 f7       	brne	.-50     	; 0x2282 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <LCD_moveCursor+0x6>
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <LCD_moveCursor+0x8>
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	8a 83       	std	Y+2, r24	; 0x02
    22d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	3d 83       	std	Y+5, r19	; 0x05
    22da:	2c 83       	std	Y+4, r18	; 0x04
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	91 05       	cpc	r25, r1
    22e4:	c1 f0       	breq	.+48     	; 0x2316 <LCD_moveCursor+0x56>
    22e6:	2c 81       	ldd	r18, Y+4	; 0x04
    22e8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ea:	22 30       	cpi	r18, 0x02	; 2
    22ec:	31 05       	cpc	r19, r1
    22ee:	2c f4       	brge	.+10     	; 0x22fa <LCD_moveCursor+0x3a>
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	9d 81       	ldd	r25, Y+5	; 0x05
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	61 f0       	breq	.+24     	; 0x2310 <LCD_moveCursor+0x50>
    22f8:	19 c0       	rjmp	.+50     	; 0x232c <LCD_moveCursor+0x6c>
    22fa:	2c 81       	ldd	r18, Y+4	; 0x04
    22fc:	3d 81       	ldd	r19, Y+5	; 0x05
    22fe:	22 30       	cpi	r18, 0x02	; 2
    2300:	31 05       	cpc	r19, r1
    2302:	69 f0       	breq	.+26     	; 0x231e <LCD_moveCursor+0x5e>
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
    2306:	9d 81       	ldd	r25, Y+5	; 0x05
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	91 05       	cpc	r25, r1
    230c:	61 f0       	breq	.+24     	; 0x2326 <LCD_moveCursor+0x66>
    230e:	0e c0       	rjmp	.+28     	; 0x232c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	0b c0       	rjmp	.+22     	; 0x232c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	80 5c       	subi	r24, 0xC0	; 192
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	07 c0       	rjmp	.+14     	; 0x232c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	80 5f       	subi	r24, 0xF0	; 240
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	03 c0       	rjmp	.+6      	; 0x232c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	80 5b       	subi	r24, 0xB0	; 176
    232a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	80 68       	ori	r24, 0x80	; 128
    2330:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <LCD_sendCommand>
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <LCD_sendCommand>
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <main>:
/*******************************************************************************
 *                      Main Function                                          *
 *******************************************************************************/

int main(void)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	67 97       	sbiw	r28, 0x17	; 23
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); // Enable interrupts by setting I-bit
    236c:	af e5       	ldi	r26, 0x5F	; 95
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ef e5       	ldi	r30, 0x5F	; 95
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 68       	ori	r24, 0x80	; 128
    2378:	8c 93       	st	X, r24

	/* initialize variables and call functions */
	uint8 str[8], flag = 0; // string to get in the data from UART, flag indicates the UART has finished receiving
    237a:	1b 82       	std	Y+3, r1	; 0x03
	sint16 current_angle = 0; // current position of Stepper motor
    237c:	1a 82       	std	Y+2, r1	; 0x02
    237e:	19 82       	std	Y+1, r1	; 0x01
	UART_ConfigType uart_type = {EIGHT_BIT, DISABLED, TWO_BIT, 9600}; // UART specs
    2380:	ce 01       	movw	r24, r28
    2382:	0c 96       	adiw	r24, 0x0c	; 12
    2384:	9c 8b       	std	Y+20, r25	; 0x14
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	ee e7       	ldi	r30, 0x7E	; 126
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	fe 8b       	std	Y+22, r31	; 0x16
    238e:	ed 8b       	std	Y+21, r30	; 0x15
    2390:	f7 e0       	ldi	r31, 0x07	; 7
    2392:	ff 8b       	std	Y+23, r31	; 0x17
    2394:	ed 89       	ldd	r30, Y+21	; 0x15
    2396:	fe 89       	ldd	r31, Y+22	; 0x16
    2398:	00 80       	ld	r0, Z
    239a:	8d 89       	ldd	r24, Y+21	; 0x15
    239c:	9e 89       	ldd	r25, Y+22	; 0x16
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	9e 8b       	std	Y+22, r25	; 0x16
    23a2:	8d 8b       	std	Y+21, r24	; 0x15
    23a4:	eb 89       	ldd	r30, Y+19	; 0x13
    23a6:	fc 89       	ldd	r31, Y+20	; 0x14
    23a8:	00 82       	st	Z, r0
    23aa:	8b 89       	ldd	r24, Y+19	; 0x13
    23ac:	9c 89       	ldd	r25, Y+20	; 0x14
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	9f 89       	ldd	r25, Y+23	; 0x17
    23b6:	91 50       	subi	r25, 0x01	; 1
    23b8:	9f 8b       	std	Y+23, r25	; 0x17
    23ba:	ef 89       	ldd	r30, Y+23	; 0x17
    23bc:	ee 23       	and	r30, r30
    23be:	51 f7       	brne	.-44     	; 0x2394 <main+0x3c>
	DC_motor_init(); // initialize DC motor
    23c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_motor_init>
	Stepper_motor_init(); // initialize Stepper motor
    23c4:	0e 94 09 06 	call	0xc12	; 0xc12 <Stepper_motor_init>
	LCD_init(); // initialize the LCD
    23c8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <LCD_init>
	UART_init(&uart_type); // initialize UART
    23cc:	ce 01       	movw	r24, r28
    23ce:	0c 96       	adiw	r24, 0x0c	; 12
    23d0:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_init>
	Timer1_start(); // start Timer1 which is responsible for the current time
    23d4:	0e 94 1c 14 	call	0x2838	; 0x2838 <Timer1_start>

	/* Prepare The LCD */
	LCD_displayString("Speed:");
    23d8:	80 e6       	ldi	r24, 0x60	; 96
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 37 11 	call	0x226e	; 0x226e <LCD_displayString>
	LCD_moveCursor(0,10);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	6a e0       	ldi	r22, 0x0A	; 10
    23e4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_moveCursor>
	LCD_displayString("Dic");
    23e8:	87 e6       	ldi	r24, 0x67	; 103
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 37 11 	call	0x226e	; 0x226e <LCD_displayString>
	LCD_moveCursor(1,0); // go to next line
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_moveCursor>
	LCD_displayString("Time: ");
    23f8:	8b e6       	ldi	r24, 0x6B	; 107
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 37 11 	call	0x226e	; 0x226e <LCD_displayString>

	while(1)
	{
		LCD_DISPLAY(&vehicle1); // display the data on the LCD
    2400:	8a e7       	ldi	r24, 0x7A	; 122
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_DISPLAY>

		// check the condition of UART is receiving something
		if (BIT_IS_SET(UCSRA,RXC))
    2408:	eb e2       	ldi	r30, 0x2B	; 43
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	88 23       	and	r24, r24
    2410:	34 f4       	brge	.+12     	; 0x241e <main+0xc6>
		{
			UART_receiveString(str); // receive the data from UART
    2412:	ce 01       	movw	r24, r28
    2414:	04 96       	adiw	r24, 0x04	; 4
    2416:	0e 94 22 15 	call	0x2a44	; 0x2a44 <UART_receiveString>
			flag = 1; // set flag
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	8b 83       	std	Y+3, r24	; 0x03
		}
		if (flag == 1) // check the flag
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	71 f7       	brne	.-36     	; 0x2400 <main+0xa8>
		{
			if (functionalize_str(str)) // check if the data received from UART is correct and handle it
    2424:	ce 01       	movw	r24, r28
    2426:	04 96       	adiw	r24, 0x04	; 4
    2428:	0e 94 de 12 	call	0x25bc	; 0x25bc <functionalize_str>
    242c:	88 23       	and	r24, r24
    242e:	31 f1       	breq	.+76     	; 0x247c <main+0x124>
			{
				speed_of_vehicle(vehicle1.speed); // set the DC motor speed
    2430:	80 91 7a 00 	lds	r24, 0x007A
    2434:	0e 94 be 05 	call	0xb7c	; 0xb7c <speed_of_vehicle>
				direction_of_vehicle(vehicle1.direction_of_DC_motor); // set the direction of the DC motor (F or B)
    2438:	80 91 7c 00 	lds	r24, 0x007C
    243c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <direction_of_vehicle>
				Stepper_motor_direction_and_angle(vehicle1.direction_of_Stepper_motor, vehicle1.angle, current_angle); // set the angle of the Stepper motor and its direction (L or R)
    2440:	80 91 7d 00 	lds	r24, 0x007D
    2444:	90 91 7b 00 	lds	r25, 0x007B
    2448:	29 81       	ldd	r18, Y+1	; 0x01
    244a:	3a 81       	ldd	r19, Y+2	; 0x02
    244c:	69 2f       	mov	r22, r25
    244e:	a9 01       	movw	r20, r18
    2450:	0e 94 38 06 	call	0xc70	; 0xc70 <Stepper_motor_direction_and_angle>

				// set the current angle value
				if (vehicle1.direction_of_Stepper_motor == 'L')
    2454:	80 91 7d 00 	lds	r24, 0x007D
    2458:	8c 34       	cpi	r24, 0x4C	; 76
    245a:	51 f4       	brne	.+20     	; 0x2470 <main+0x118>
				{
					current_angle = -1 * vehicle1.angle;
    245c:	80 91 7b 00 	lds	r24, 0x007B
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	90 95       	com	r25
    2466:	81 95       	neg	r24
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	06 c0       	rjmp	.+12     	; 0x247c <main+0x124>
				}
				else current_angle = vehicle1.angle;
    2470:	80 91 7b 00 	lds	r24, 0x007B
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
			}
			flag = 0; // clear flag
    247c:	1b 82       	std	Y+3, r1	; 0x03
    247e:	c0 cf       	rjmp	.-128    	; 0x2400 <main+0xa8>

00002480 <LCD_DISPLAY>:
/*
 * Description:
 * Display on LCD
 */
void LCD_DISPLAY(const VEHICLE *vec)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <LCD_DISPLAY+0x6>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
	// if the speed is 100 print "100%" else print the actual speed
	LCD_moveCursor(0,6);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_moveCursor>
	if(vec->speed == 100)
    2496:	e9 81       	ldd	r30, Y+1	; 0x01
    2498:	fa 81       	ldd	r31, Y+2	; 0x02
    249a:	80 81       	ld	r24, Z
    249c:	84 36       	cpi	r24, 0x64	; 100
    249e:	51 f4       	brne	.+20     	; 0x24b4 <LCD_DISPLAY+0x34>
	{
		LCD_displayCharacter('1');
    24a0:	81 e3       	ldi	r24, 0x31	; 49
    24a2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
		LCD_displayCharacter('0');
    24a6:	80 e3       	ldi	r24, 0x30	; 48
    24a8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
		LCD_displayCharacter('0');
    24ac:	80 e3       	ldi	r24, 0x30	; 48
    24ae:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
    24b2:	15 c0       	rjmp	.+42     	; 0x24de <LCD_DISPLAY+0x5e>
	}
	else{
		LCD_displayCharacter((vec->speed / 10) + 48);
    24b4:	e9 81       	ldd	r30, Y+1	; 0x01
    24b6:	fa 81       	ldd	r31, Y+2	; 0x02
    24b8:	80 81       	ld	r24, Z
    24ba:	9a e0       	ldi	r25, 0x0A	; 10
    24bc:	69 2f       	mov	r22, r25
    24be:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    24c2:	80 5d       	subi	r24, 0xD0	; 208
    24c4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
		LCD_displayCharacter((vec->speed % 10) + 48);
    24c8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ca:	fa 81       	ldd	r31, Y+2	; 0x02
    24cc:	80 81       	ld	r24, Z
    24ce:	9a e0       	ldi	r25, 0x0A	; 10
    24d0:	69 2f       	mov	r22, r25
    24d2:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    24d6:	89 2f       	mov	r24, r25
    24d8:	80 5d       	subi	r24, 0xD0	; 208
    24da:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	}
	LCD_displayCharacter('%');
    24de:	85 e2       	ldi	r24, 0x25	; 37
    24e0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_moveCursor(0,13);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	6d e0       	ldi	r22, 0x0D	; 13
    24e8:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_moveCursor>
	// if the Stepper motor in Left direction then print on LCD -ve of the angle
	if (vec->direction_of_Stepper_motor == 'L')
    24ec:	e9 81       	ldd	r30, Y+1	; 0x01
    24ee:	fa 81       	ldd	r31, Y+2	; 0x02
    24f0:	83 81       	ldd	r24, Z+3	; 0x03
    24f2:	8c 34       	cpi	r24, 0x4C	; 76
    24f4:	19 f4       	brne	.+6      	; 0x24fc <LCD_DISPLAY+0x7c>
	{
		LCD_displayCharacter('-');
    24f6:	8d e2       	ldi	r24, 0x2D	; 45
    24f8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	}
	// print the Stepper motor's angle
	LCD_displayCharacter((vec->angle / 10) + 48);
    24fc:	e9 81       	ldd	r30, Y+1	; 0x01
    24fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2500:	81 81       	ldd	r24, Z+1	; 0x01
    2502:	9a e0       	ldi	r25, 0x0A	; 10
    2504:	69 2f       	mov	r22, r25
    2506:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    250a:	80 5d       	subi	r24, 0xD0	; 208
    250c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter((vec->angle % 10) + 48);
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	81 81       	ldd	r24, Z+1	; 0x01
    2516:	9a e0       	ldi	r25, 0x0A	; 10
    2518:	69 2f       	mov	r22, r25
    251a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    251e:	89 2f       	mov	r24, r25
    2520:	80 5d       	subi	r24, 0xD0	; 208
    2522:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter(' '); // indicates the end of the first line
    2526:	80 e2       	ldi	r24, 0x20	; 32
    2528:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>

	// print the current Time
	LCD_moveCursor(1,6);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	66 e0       	ldi	r22, 0x06	; 6
    2530:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_moveCursor>
	LCD_displayCharacter((now.hours / 10) + 48);
    2534:	80 91 89 00 	lds	r24, 0x0089
    2538:	9a e0       	ldi	r25, 0x0A	; 10
    253a:	69 2f       	mov	r22, r25
    253c:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    2540:	80 5d       	subi	r24, 0xD0	; 208
    2542:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter((now.hours % 10) + 48);
    2546:	80 91 89 00 	lds	r24, 0x0089
    254a:	9a e0       	ldi	r25, 0x0A	; 10
    254c:	69 2f       	mov	r22, r25
    254e:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    2552:	89 2f       	mov	r24, r25
    2554:	80 5d       	subi	r24, 0xD0	; 208
    2556:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter(':');
    255a:	8a e3       	ldi	r24, 0x3A	; 58
    255c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter((now.minutes / 10) + 48);
    2560:	80 91 88 00 	lds	r24, 0x0088
    2564:	9a e0       	ldi	r25, 0x0A	; 10
    2566:	69 2f       	mov	r22, r25
    2568:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    256c:	80 5d       	subi	r24, 0xD0	; 208
    256e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter((now.minutes % 10) + 48);
    2572:	80 91 88 00 	lds	r24, 0x0088
    2576:	9a e0       	ldi	r25, 0x0A	; 10
    2578:	69 2f       	mov	r22, r25
    257a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    257e:	89 2f       	mov	r24, r25
    2580:	80 5d       	subi	r24, 0xD0	; 208
    2582:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter(':');
    2586:	8a e3       	ldi	r24, 0x3A	; 58
    2588:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter((now.seconds / 10) + 48);
    258c:	80 91 87 00 	lds	r24, 0x0087
    2590:	9a e0       	ldi	r25, 0x0A	; 10
    2592:	69 2f       	mov	r22, r25
    2594:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    2598:	80 5d       	subi	r24, 0xD0	; 208
    259a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
	LCD_displayCharacter((now.seconds % 10) + 48);
    259e:	80 91 87 00 	lds	r24, 0x0087
    25a2:	9a e0       	ldi	r25, 0x0A	; 10
    25a4:	69 2f       	mov	r22, r25
    25a6:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodqi4>
    25aa:	89 2f       	mov	r24, r25
    25ac:	80 5d       	subi	r24, 0xD0	; 208
    25ae:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_displayCharacter>
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <functionalize_str>:
/*
 * Description:
 * Check if the data received from UART is correct then handle it.
 */
uint8 functionalize_str(uint8 str[8])
{/* The commented C code is for if we don't have strict rules on the length so we can accept 76F18LE */
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <functionalize_str+0x6>
    25c2:	0f 92       	push	r0
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
	//if (str [8] == '\0')
	//{
	/* check if the frame was correct one */
	if (str[7] != 'E') // last letter is not 'E'
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	fc 01       	movw	r30, r24
    25d2:	37 96       	adiw	r30, 0x07	; 7
    25d4:	80 81       	ld	r24, Z
    25d6:	85 34       	cpi	r24, 0x45	; 69
    25d8:	11 f0       	breq	.+4      	; 0x25de <functionalize_str+0x22>
		return 0;
    25da:	1b 82       	std	Y+3, r1	; 0x03
    25dc:	d7 c0       	rjmp	.+430    	; 0x278c <functionalize_str+0x1d0>
	if (str[0] < '0' || str[0] > '1') // speed hundreds must be 0 or 1 only
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	80 81       	ld	r24, Z
    25e4:	80 33       	cpi	r24, 0x30	; 48
    25e6:	28 f0       	brcs	.+10     	; 0x25f2 <functionalize_str+0x36>
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	80 81       	ld	r24, Z
    25ee:	82 33       	cpi	r24, 0x32	; 50
    25f0:	10 f0       	brcs	.+4      	; 0x25f6 <functionalize_str+0x3a>
		return 0;
    25f2:	1b 82       	std	Y+3, r1	; 0x03
    25f4:	cb c0       	rjmp	.+406    	; 0x278c <functionalize_str+0x1d0>
	if (str[1] < '0' || str[1] > '9') // speed tens must be a number
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	fc 01       	movw	r30, r24
    25fc:	31 96       	adiw	r30, 0x01	; 1
    25fe:	80 81       	ld	r24, Z
    2600:	80 33       	cpi	r24, 0x30	; 48
    2602:	38 f0       	brcs	.+14     	; 0x2612 <functionalize_str+0x56>
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	fc 01       	movw	r30, r24
    260a:	31 96       	adiw	r30, 0x01	; 1
    260c:	80 81       	ld	r24, Z
    260e:	8a 33       	cpi	r24, 0x3A	; 58
    2610:	10 f0       	brcs	.+4      	; 0x2616 <functionalize_str+0x5a>
		return 0;
    2612:	1b 82       	std	Y+3, r1	; 0x03
    2614:	bb c0       	rjmp	.+374    	; 0x278c <functionalize_str+0x1d0>
	if (str[2] < '0' || str[2] > '9') // speed units must be a number
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	fc 01       	movw	r30, r24
    261c:	32 96       	adiw	r30, 0x02	; 2
    261e:	80 81       	ld	r24, Z
    2620:	80 33       	cpi	r24, 0x30	; 48
    2622:	38 f0       	brcs	.+14     	; 0x2632 <functionalize_str+0x76>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	fc 01       	movw	r30, r24
    262a:	32 96       	adiw	r30, 0x02	; 2
    262c:	80 81       	ld	r24, Z
    262e:	8a 33       	cpi	r24, 0x3A	; 58
    2630:	10 f0       	brcs	.+4      	; 0x2636 <functionalize_str+0x7a>
		return 0;
    2632:	1b 82       	std	Y+3, r1	; 0x03
    2634:	ab c0       	rjmp	.+342    	; 0x278c <functionalize_str+0x1d0>
	// check the direction of DC motor
	if (str[3] != 'F')
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	fc 01       	movw	r30, r24
    263c:	33 96       	adiw	r30, 0x03	; 3
    263e:	80 81       	ld	r24, Z
    2640:	86 34       	cpi	r24, 0x46	; 70
    2642:	49 f0       	breq	.+18     	; 0x2656 <functionalize_str+0x9a>
		if(str[3] != 'B')
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	fc 01       	movw	r30, r24
    264a:	33 96       	adiw	r30, 0x03	; 3
    264c:	80 81       	ld	r24, Z
    264e:	82 34       	cpi	r24, 0x42	; 66
    2650:	11 f0       	breq	.+4      	; 0x2656 <functionalize_str+0x9a>
			return 0;
    2652:	1b 82       	std	Y+3, r1	; 0x03
    2654:	9b c0       	rjmp	.+310    	; 0x278c <functionalize_str+0x1d0>
	if (str[4] < '0' || str[4] > '9') // angle tens must be a number
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	fc 01       	movw	r30, r24
    265c:	34 96       	adiw	r30, 0x04	; 4
    265e:	80 81       	ld	r24, Z
    2660:	80 33       	cpi	r24, 0x30	; 48
    2662:	38 f0       	brcs	.+14     	; 0x2672 <functionalize_str+0xb6>
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	fc 01       	movw	r30, r24
    266a:	34 96       	adiw	r30, 0x04	; 4
    266c:	80 81       	ld	r24, Z
    266e:	8a 33       	cpi	r24, 0x3A	; 58
    2670:	10 f0       	brcs	.+4      	; 0x2676 <functionalize_str+0xba>
		return 0;
    2672:	1b 82       	std	Y+3, r1	; 0x03
    2674:	8b c0       	rjmp	.+278    	; 0x278c <functionalize_str+0x1d0>
	if (str[5] < '0' || str[5] > '9') // angle units must be a number
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	fc 01       	movw	r30, r24
    267c:	35 96       	adiw	r30, 0x05	; 5
    267e:	80 81       	ld	r24, Z
    2680:	80 33       	cpi	r24, 0x30	; 48
    2682:	38 f0       	brcs	.+14     	; 0x2692 <functionalize_str+0xd6>
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	fc 01       	movw	r30, r24
    268a:	35 96       	adiw	r30, 0x05	; 5
    268c:	80 81       	ld	r24, Z
    268e:	8a 33       	cpi	r24, 0x3A	; 58
    2690:	10 f0       	brcs	.+4      	; 0x2696 <functionalize_str+0xda>
		return 0;
    2692:	1b 82       	std	Y+3, r1	; 0x03
    2694:	7b c0       	rjmp	.+246    	; 0x278c <functionalize_str+0x1d0>
	// check the direction of Stepper motor
	if (str[6] != 'R')
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	fc 01       	movw	r30, r24
    269c:	36 96       	adiw	r30, 0x06	; 6
    269e:	80 81       	ld	r24, Z
    26a0:	82 35       	cpi	r24, 0x52	; 82
    26a2:	49 f0       	breq	.+18     	; 0x26b6 <functionalize_str+0xfa>
		if(str[6] != 'L')
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	fc 01       	movw	r30, r24
    26aa:	36 96       	adiw	r30, 0x06	; 6
    26ac:	80 81       	ld	r24, Z
    26ae:	8c 34       	cpi	r24, 0x4C	; 76
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <functionalize_str+0xfa>
			return 0;
    26b2:	1b 82       	std	Y+3, r1	; 0x03
    26b4:	6b c0       	rjmp	.+214    	; 0x278c <functionalize_str+0x1d0>
	/* handle the data */
	vehicle1.speed = (str[0] - 48) * 100;
    26b6:	e9 81       	ldd	r30, Y+1	; 0x01
    26b8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ba:	80 81       	ld	r24, Z
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	84 e6       	ldi	r24, 0x64	; 100
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	ac 01       	movw	r20, r24
    26c6:	24 9f       	mul	r18, r20
    26c8:	c0 01       	movw	r24, r0
    26ca:	25 9f       	mul	r18, r21
    26cc:	90 0d       	add	r25, r0
    26ce:	34 9f       	mul	r19, r20
    26d0:	90 0d       	add	r25, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	80 5c       	subi	r24, 0xC0	; 192
    26d6:	80 93 7a 00 	sts	0x007A, r24
	vehicle1.speed += (str[1] - 48) * 10;
    26da:	40 91 7a 00 	lds	r20, 0x007A
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	fc 01       	movw	r30, r24
    26e4:	31 96       	adiw	r30, 0x01	; 1
    26e6:	80 81       	ld	r24, Z
    26e8:	88 2f       	mov	r24, r24
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9c 01       	movw	r18, r24
    26ee:	22 0f       	add	r18, r18
    26f0:	33 1f       	adc	r19, r19
    26f2:	c9 01       	movw	r24, r18
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	84 0f       	add	r24, r20
    2702:	80 5e       	subi	r24, 0xE0	; 224
    2704:	80 93 7a 00 	sts	0x007A, r24
	vehicle1.speed += (str[2] - 48);
    2708:	20 91 7a 00 	lds	r18, 0x007A
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	fc 01       	movw	r30, r24
    2712:	32 96       	adiw	r30, 0x02	; 2
    2714:	80 81       	ld	r24, Z
    2716:	82 0f       	add	r24, r18
    2718:	80 53       	subi	r24, 0x30	; 48
    271a:	80 93 7a 00 	sts	0x007A, r24

	/* speed must be from 0 to 100 */
	if (vehicle1.speed > 100)
    271e:	80 91 7a 00 	lds	r24, 0x007A
    2722:	85 36       	cpi	r24, 0x65	; 101
    2724:	20 f0       	brcs	.+8      	; 0x272e <functionalize_str+0x172>
	{
		vehicle1.speed = 0;
    2726:	10 92 7a 00 	sts	0x007A, r1
		return 0;
    272a:	1b 82       	std	Y+3, r1	; 0x03
    272c:	2f c0       	rjmp	.+94     	; 0x278c <functionalize_str+0x1d0>
	}

	vehicle1.direction_of_DC_motor = str[3];
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	fc 01       	movw	r30, r24
    2734:	33 96       	adiw	r30, 0x03	; 3
    2736:	80 81       	ld	r24, Z
    2738:	80 93 7c 00 	sts	0x007C, r24
	vehicle1.angle = (str[4] - 48) * 10;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	fc 01       	movw	r30, r24
    2742:	34 96       	adiw	r30, 0x04	; 4
    2744:	80 81       	ld	r24, Z
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 01       	movw	r18, r24
    274c:	22 0f       	add	r18, r18
    274e:	33 1f       	adc	r19, r19
    2750:	c9 01       	movw	r24, r18
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	82 0f       	add	r24, r18
    275c:	93 1f       	adc	r25, r19
    275e:	80 5e       	subi	r24, 0xE0	; 224
    2760:	80 93 7b 00 	sts	0x007B, r24
	vehicle1.angle += (str[5] - 48);
    2764:	20 91 7b 00 	lds	r18, 0x007B
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	fc 01       	movw	r30, r24
    276e:	35 96       	adiw	r30, 0x05	; 5
    2770:	80 81       	ld	r24, Z
    2772:	82 0f       	add	r24, r18
    2774:	80 53       	subi	r24, 0x30	; 48
    2776:	80 93 7b 00 	sts	0x007B, r24
	vehicle1.direction_of_Stepper_motor = str[6];
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	fc 01       	movw	r30, r24
    2780:	36 96       	adiw	r30, 0x06	; 6
    2782:	80 81       	ld	r24, Z
    2784:	80 93 7d 00 	sts	0x007D, r24
		vehicle1.angle = (str[3] - 48) * 10;
		vehicle1.angle += (str[4] - 48);
		vehicle1.direction_of_Stepper_motor = str[5];
	}*/

	return 1;
    2788:	51 e0       	ldi	r21, 0x01	; 1
    278a:	5b 83       	std	Y+3, r21	; 0x03
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <PWM_Timer0_Start>:
 *5. Setup the direction for OC0 as output pin through the GPIO driver.
 *6. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */

void PWM_Timer0_Start( uint8 duty_cycle )
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	0f 92       	push	r0
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    27a6:	e2 e5       	ldi	r30, 0x52	; 82
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	10 82       	st	Z, r1

	OCR0  = duty_cycle ; // Set Compare Value
    27ac:	ec e5       	ldi	r30, 0x5C	; 92
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    27b4:	a7 e3       	ldi	r26, 0x37	; 55
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e7 e3       	ldi	r30, 0x37	; 55
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 60       	ori	r24, 0x08	; 8
    27c0:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    27c2:	e3 e5       	ldi	r30, 0x53	; 83
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	8a e6       	ldi	r24, 0x6A	; 106
    27c8:	80 83       	st	Z, r24
}
    27ca:	0f 90       	pop	r0
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routine                             *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	2f 93       	push	r18
    27de:	3f 93       	push	r19
    27e0:	4f 93       	push	r20
    27e2:	5f 93       	push	r21
    27e4:	6f 93       	push	r22
    27e6:	7f 93       	push	r23
    27e8:	8f 93       	push	r24
    27ea:	9f 93       	push	r25
    27ec:	af 93       	push	r26
    27ee:	bf 93       	push	r27
    27f0:	ef 93       	push	r30
    27f2:	ff 93       	push	r31
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR, OCF1A); /* clear Timer1, Output Compare A Match Flag */
    27fc:	a8 e5       	ldi	r26, 0x58	; 88
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e8 e5       	ldi	r30, 0x58	; 88
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	80 61       	ori	r24, 0x10	; 16
    2808:	8c 93       	st	X, r24
	set_time(&now); /* update the time */
    280a:	87 e8       	ldi	r24, 0x87	; 135
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 42 14 	call	0x2884	; 0x2884 <set_time>
	/* ISR mustn't have a function call within it but in our case with only one interrupt we can do that */
}
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	ff 91       	pop	r31
    2818:	ef 91       	pop	r30
    281a:	bf 91       	pop	r27
    281c:	af 91       	pop	r26
    281e:	9f 91       	pop	r25
    2820:	8f 91       	pop	r24
    2822:	7f 91       	pop	r23
    2824:	6f 91       	pop	r22
    2826:	5f 91       	pop	r21
    2828:	4f 91       	pop	r20
    282a:	3f 91       	pop	r19
    282c:	2f 91       	pop	r18
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <Timer1_start>:
 * 2. Put initial value in TCNT1 register
 * 3. Select the required prescaler
 * 4. choose the compare value
 */
void Timer1_start(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
	/* initial value */
	TCNT1 = 0;
    2840:	ec e4       	ldi	r30, 0x4C	; 76
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	11 82       	std	Z+1, r1	; 0x01
    2846:	10 82       	st	Z, r1
	/*store compare value in OCR1A register */
	OCR1A = 15625;
    2848:	ea e4       	ldi	r30, 0x4A	; 74
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	89 e0       	ldi	r24, 0x09	; 9
    284e:	9d e3       	ldi	r25, 0x3D	; 61
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
	/*Enable Timer1 Compare A Interrupt */
	TIMSK |= (1<<OCIE1A);
    2854:	a9 e5       	ldi	r26, 0x59	; 89
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e9 e5       	ldi	r30, 0x59	; 89
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	80 61       	ori	r24, 0x10	; 16
    2860:	8c 93       	st	X, r24
	/* Set FOC1A for non-PWM mode */
	TCCR1A |= (1<<FOC1A);
    2862:	af e4       	ldi	r26, 0x4F	; 79
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	ef e4       	ldi	r30, 0x4F	; 79
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	88 60       	ori	r24, 0x08	; 8
    286e:	8c 93       	st	X, r24
	/*select prescaler of N = 64 and select compare mode */
	TCCR1B |= (1<<WGM12) | (1<<CS11) | (1<<CS10);
    2870:	ae e4       	ldi	r26, 0x4E	; 78
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ee e4       	ldi	r30, 0x4E	; 78
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	8b 60       	ori	r24, 0x0B	; 11
    287c:	8c 93       	st	X, r24
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <set_time>:
/*
 * Description:
 * Update the time with the current time.
 */
void set_time(TIME *time)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <set_time+0x6>
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
		time->seconds++;
    2892:	e9 81       	ldd	r30, Y+1	; 0x01
    2894:	fa 81       	ldd	r31, Y+2	; 0x02
    2896:	80 81       	ld	r24, Z
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	80 83       	st	Z, r24
		if(time->seconds > 59)
    28a0:	e9 81       	ldd	r30, Y+1	; 0x01
    28a2:	fa 81       	ldd	r31, Y+2	; 0x02
    28a4:	80 81       	ld	r24, Z
    28a6:	8c 33       	cpi	r24, 0x3C	; 60
    28a8:	50 f0       	brcs	.+20     	; 0x28be <set_time+0x3a>
		{
			time->minutes++;
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	81 81       	ldd	r24, Z+1	; 0x01
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	e9 81       	ldd	r30, Y+1	; 0x01
    28b4:	fa 81       	ldd	r31, Y+2	; 0x02
    28b6:	81 83       	std	Z+1, r24	; 0x01
			time->seconds = 0;
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	10 82       	st	Z, r1
		}
		if (time->minutes > 59)
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	81 81       	ldd	r24, Z+1	; 0x01
    28c4:	8c 33       	cpi	r24, 0x3C	; 60
    28c6:	50 f0       	brcs	.+20     	; 0x28dc <set_time+0x58>
		{
			time->hours++;
    28c8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ca:	fa 81       	ldd	r31, Y+2	; 0x02
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	e9 81       	ldd	r30, Y+1	; 0x01
    28d2:	fa 81       	ldd	r31, Y+2	; 0x02
    28d4:	82 83       	std	Z+2, r24	; 0x02
			time->minutes = 0;
    28d6:	e9 81       	ldd	r30, Y+1	; 0x01
    28d8:	fa 81       	ldd	r31, Y+2	; 0x02
    28da:	11 82       	std	Z+1, r1	; 0x01
		}
		if(time->hours > 23)
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	88 31       	cpi	r24, 0x18	; 24
    28e4:	48 f0       	brcs	.+18     	; 0x28f8 <set_time+0x74>
		{
			time->seconds = 0;
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	10 82       	st	Z, r1
			time->minutes = 0;
    28ec:	e9 81       	ldd	r30, Y+1	; 0x01
    28ee:	fa 81       	ldd	r31, Y+2	; 0x02
    28f0:	11 82       	std	Z+1, r1	; 0x01
			time->hours = 0;
    28f2:	e9 81       	ldd	r30, Y+1	; 0x01
    28f4:	fa 81       	ldd	r31, Y+2	; 0x02
    28f6:	12 82       	std	Z+2, r1	; 0x02
		}
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	00 d0       	rcall	.+0      	; 0x2908 <UART_init+0x6>
    2908:	00 d0       	rcall	.+0      	; 0x290a <UART_init+0x8>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2912:	1a 82       	std	Y+2, r1	; 0x02
    2914:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2916:	eb e2       	ldi	r30, 0x2B	; 43
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	82 e0       	ldi	r24, 0x02	; 2
    291c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    291e:	ea e2       	ldi	r30, 0x2A	; 42
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	88 e1       	ldi	r24, 0x18	; 24
    2924:	80 83       	st	Z, r24
	 * UPM1:0  = based on the parity mode chosen in the configuration
	 * USBS    = 0 One stop bit or 1 for 2 stop bits
	 * UCSZ1:0 = based on number of bits chosen in the configuration
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
    2926:	a0 e4       	ldi	r26, 0x40	; 64
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e0 e4       	ldi	r30, 0x40	; 64
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	80 68       	ori	r24, 0x80	; 128
    2932:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity_mode)<<4 );
    2934:	a0 e4       	ldi	r26, 0x40	; 64
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e0 e4       	ldi	r30, 0x40	; 64
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	28 2f       	mov	r18, r24
    2940:	2f 7c       	andi	r18, 0xCF	; 207
    2942:	eb 81       	ldd	r30, Y+3	; 0x03
    2944:	fc 81       	ldd	r31, Y+4	; 0x04
    2946:	81 81       	ldd	r24, Z+1	; 0x01
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	82 95       	swap	r24
    294e:	92 95       	swap	r25
    2950:	90 7f       	andi	r25, 0xF0	; 240
    2952:	98 27       	eor	r25, r24
    2954:	80 7f       	andi	r24, 0xF0	; 240
    2956:	98 27       	eor	r25, r24
    2958:	82 2b       	or	r24, r18
    295a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bits)<< 3);
    295c:	a0 e4       	ldi	r26, 0x40	; 64
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e0 e4       	ldi	r30, 0x40	; 64
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	28 2f       	mov	r18, r24
    2968:	27 7f       	andi	r18, 0xF7	; 247
    296a:	eb 81       	ldd	r30, Y+3	; 0x03
    296c:	fc 81       	ldd	r31, Y+4	; 0x04
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	82 2b       	or	r24, r18
    2982:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ( ( (Config_Ptr->character_size)<< 1) & 0x06);
    2984:	a0 e4       	ldi	r26, 0x40	; 64
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e0 e4       	ldi	r30, 0x40	; 64
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	28 2f       	mov	r18, r24
    2990:	29 7f       	andi	r18, 0xF9	; 249
    2992:	eb 81       	ldd	r30, Y+3	; 0x03
    2994:	fc 81       	ldd	r31, Y+4	; 0x04
    2996:	80 81       	ld	r24, Z
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	86 70       	andi	r24, 0x06	; 6
    29a2:	82 2b       	or	r24, r18
    29a4:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr->character_size) & 0x04);
    29a6:	aa e2       	ldi	r26, 0x2A	; 42
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ea e2       	ldi	r30, 0x2A	; 42
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	98 2f       	mov	r25, r24
    29b2:	9b 7f       	andi	r25, 0xFB	; 251
    29b4:	eb 81       	ldd	r30, Y+3	; 0x03
    29b6:	fc 81       	ldd	r31, Y+4	; 0x04
    29b8:	80 81       	ld	r24, Z
    29ba:	84 70       	andi	r24, 0x04	; 4
    29bc:	89 2b       	or	r24, r25
    29be:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->Baud_Rate * 8UL))) - 1);
    29c0:	eb 81       	ldd	r30, Y+3	; 0x03
    29c2:	fc 81       	ldd	r31, Y+4	; 0x04
    29c4:	83 81       	ldd	r24, Z+3	; 0x03
    29c6:	94 81       	ldd	r25, Z+4	; 0x04
    29c8:	a5 81       	ldd	r26, Z+5	; 0x05
    29ca:	b6 81       	ldd	r27, Z+6	; 0x06
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	aa 1f       	adc	r26, r26
    29d2:	bb 1f       	adc	r27, r27
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	aa 1f       	adc	r26, r26
    29da:	bb 1f       	adc	r27, r27
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	aa 1f       	adc	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	9c 01       	movw	r18, r24
    29e6:	ad 01       	movw	r20, r26
    29e8:	80 e4       	ldi	r24, 0x40	; 64
    29ea:	92 e4       	ldi	r25, 0x42	; 66
    29ec:	af e0       	ldi	r26, 0x0F	; 15
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__udivmodsi4>
    29f8:	da 01       	movw	r26, r20
    29fa:	c9 01       	movw	r24, r18
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2a02:	e0 e4       	ldi	r30, 0x40	; 64
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	89 2f       	mov	r24, r25
    2a0c:	99 27       	eor	r25, r25
    2a0e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2a10:	e9 e2       	ldi	r30, 0x29	; 41
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	80 83       	st	Z, r24
}
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a2e:	eb e2       	ldi	r30, 0x2B	; 43
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	88 23       	and	r24, r24
    2a36:	dc f7       	brge	.-10     	; 0x2a2e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2a38:	ec e2       	ldi	r30, 0x2C	; 44
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
}
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <UART_receiveString>:
/*
 * Description :
 * Receive the required string through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	61 97       	sbiw	r28, 0x11	; 17
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	99 8b       	std	Y+17, r25	; 0x11
    2a5e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    2a60:	1f 86       	std	Y+15, r1	; 0x0f

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	88 89       	ldd	r24, Y+16	; 0x10
    2a6a:	99 89       	ldd	r25, Y+17	; 0x11
    2a6c:	8c 01       	movw	r16, r24
    2a6e:	02 0f       	add	r16, r18
    2a70:	13 1f       	adc	r17, r19
    2a72:	0e 94 13 15 	call	0x2a26	; 0x2a26 <UART_recieveByte>
    2a76:	f8 01       	movw	r30, r16
    2a78:	80 83       	st	Z, r24
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <UART_receiveString+0x56>

	/* Receive another another 5 bytes */
	while(i < 6)
	{
		i++;
    2a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
		Str[i] = UART_recieveByte();
    2a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	88 89       	ldd	r24, Y+16	; 0x10
    2a8a:	99 89       	ldd	r25, Y+17	; 0x11
    2a8c:	8c 01       	movw	r16, r24
    2a8e:	02 0f       	add	r16, r18
    2a90:	13 1f       	adc	r17, r19
    2a92:	0e 94 13 15 	call	0x2a26	; 0x2a26 <UART_recieveByte>
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive another another 5 bytes */
	while(i < 6)
    2a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9c:	86 30       	cpi	r24, 0x06	; 6
    2a9e:	70 f3       	brcs	.-36     	; 0x2a7c <UART_receiveString+0x38>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e8       	ldi	r25, 0x80	; 128
    2aa4:	ab eb       	ldi	r26, 0xBB	; 187
    2aa6:	b4 e4       	ldi	r27, 0x44	; 68
    2aa8:	8b 87       	std	Y+11, r24	; 0x0b
    2aaa:	9c 87       	std	Y+12, r25	; 0x0c
    2aac:	ad 87       	std	Y+13, r26	; 0x0d
    2aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a e7       	ldi	r20, 0x7A	; 122
    2abe:	53 e4       	ldi	r21, 0x43	; 67
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	8f 83       	std	Y+7, r24	; 0x07
    2aca:	98 87       	std	Y+8, r25	; 0x08
    2acc:	a9 87       	std	Y+9, r26	; 0x09
    2ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <UART_receiveString+0xae>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	3f c0       	rjmp	.+126    	; 0x2b70 <UART_receiveString+0x12c>
	else if (__tmp > 65535)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	4c f5       	brge	.+82     	; 0x2b5c <UART_receiveString+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <UART_receiveString+0x10e>
    2b34:	89 e1       	ldi	r24, 0x19	; 25
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <UART_receiveString+0xfc>
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <UART_receiveString+0xf0>
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <UART_receiveString+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5e:	78 85       	ldd	r23, Y+8	; 0x08
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <UART_receiveString+0x138>
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	_delay_ms(1500); // waiting for the last byte
	if(BIT_IS_SET(UCSRA,RXC)) // check RX flag
    2b84:	eb e2       	ldi	r30, 0x2B	; 43
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 23       	and	r24, r24
    2b8c:	7c f4       	brge	.+30     	; 0x2bac <UART_receiveString+0x168>
	{
		i++;
    2b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	8f 87       	std	Y+15, r24	; 0x0f
		Str[i] = UART_recieveByte(); // get the last byte
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	88 89       	ldd	r24, Y+16	; 0x10
    2b9c:	99 89       	ldd	r25, Y+17	; 0x11
    2b9e:	8c 01       	movw	r16, r24
    2ba0:	02 0f       	add	r16, r18
    2ba2:	13 1f       	adc	r17, r19
    2ba4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <UART_recieveByte>
    2ba8:	f8 01       	movw	r30, r16
    2baa:	80 83       	st	Z, r24
	}

	Str[i + 1] = '\0';
    2bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9c 01       	movw	r18, r24
    2bb4:	2f 5f       	subi	r18, 0xFF	; 255
    2bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb8:	88 89       	ldd	r24, Y+16	; 0x10
    2bba:	99 89       	ldd	r25, Y+17	; 0x11
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 0f       	add	r30, r18
    2bc0:	f3 1f       	adc	r31, r19
    2bc2:	10 82       	st	Z, r1
}
    2bc4:	61 96       	adiw	r28, 0x11	; 17
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	08 95       	ret

00002bda <__udivmodqi4>:
    2bda:	99 1b       	sub	r25, r25
    2bdc:	79 e0       	ldi	r23, 0x09	; 9
    2bde:	04 c0       	rjmp	.+8      	; 0x2be8 <__udivmodqi4_ep>

00002be0 <__udivmodqi4_loop>:
    2be0:	99 1f       	adc	r25, r25
    2be2:	96 17       	cp	r25, r22
    2be4:	08 f0       	brcs	.+2      	; 0x2be8 <__udivmodqi4_ep>
    2be6:	96 1b       	sub	r25, r22

00002be8 <__udivmodqi4_ep>:
    2be8:	88 1f       	adc	r24, r24
    2bea:	7a 95       	dec	r23
    2bec:	c9 f7       	brne	.-14     	; 0x2be0 <__udivmodqi4_loop>
    2bee:	80 95       	com	r24
    2bf0:	08 95       	ret

00002bf2 <__divmodhi4>:
    2bf2:	97 fb       	bst	r25, 7
    2bf4:	09 2e       	mov	r0, r25
    2bf6:	07 26       	eor	r0, r23
    2bf8:	0a d0       	rcall	.+20     	; 0x2c0e <__divmodhi4_neg1>
    2bfa:	77 fd       	sbrc	r23, 7
    2bfc:	04 d0       	rcall	.+8      	; 0x2c06 <__divmodhi4_neg2>
    2bfe:	2e d0       	rcall	.+92     	; 0x2c5c <__udivmodhi4>
    2c00:	06 d0       	rcall	.+12     	; 0x2c0e <__divmodhi4_neg1>
    2c02:	00 20       	and	r0, r0
    2c04:	1a f4       	brpl	.+6      	; 0x2c0c <__divmodhi4_exit>

00002c06 <__divmodhi4_neg2>:
    2c06:	70 95       	com	r23
    2c08:	61 95       	neg	r22
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255

00002c0c <__divmodhi4_exit>:
    2c0c:	08 95       	ret

00002c0e <__divmodhi4_neg1>:
    2c0e:	f6 f7       	brtc	.-4      	; 0x2c0c <__divmodhi4_exit>
    2c10:	90 95       	com	r25
    2c12:	81 95       	neg	r24
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	08 95       	ret

00002c18 <__udivmodsi4>:
    2c18:	a1 e2       	ldi	r26, 0x21	; 33
    2c1a:	1a 2e       	mov	r1, r26
    2c1c:	aa 1b       	sub	r26, r26
    2c1e:	bb 1b       	sub	r27, r27
    2c20:	fd 01       	movw	r30, r26
    2c22:	0d c0       	rjmp	.+26     	; 0x2c3e <__udivmodsi4_ep>

00002c24 <__udivmodsi4_loop>:
    2c24:	aa 1f       	adc	r26, r26
    2c26:	bb 1f       	adc	r27, r27
    2c28:	ee 1f       	adc	r30, r30
    2c2a:	ff 1f       	adc	r31, r31
    2c2c:	a2 17       	cp	r26, r18
    2c2e:	b3 07       	cpc	r27, r19
    2c30:	e4 07       	cpc	r30, r20
    2c32:	f5 07       	cpc	r31, r21
    2c34:	20 f0       	brcs	.+8      	; 0x2c3e <__udivmodsi4_ep>
    2c36:	a2 1b       	sub	r26, r18
    2c38:	b3 0b       	sbc	r27, r19
    2c3a:	e4 0b       	sbc	r30, r20
    2c3c:	f5 0b       	sbc	r31, r21

00002c3e <__udivmodsi4_ep>:
    2c3e:	66 1f       	adc	r22, r22
    2c40:	77 1f       	adc	r23, r23
    2c42:	88 1f       	adc	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	1a 94       	dec	r1
    2c48:	69 f7       	brne	.-38     	; 0x2c24 <__udivmodsi4_loop>
    2c4a:	60 95       	com	r22
    2c4c:	70 95       	com	r23
    2c4e:	80 95       	com	r24
    2c50:	90 95       	com	r25
    2c52:	9b 01       	movw	r18, r22
    2c54:	ac 01       	movw	r20, r24
    2c56:	bd 01       	movw	r22, r26
    2c58:	cf 01       	movw	r24, r30
    2c5a:	08 95       	ret

00002c5c <__udivmodhi4>:
    2c5c:	aa 1b       	sub	r26, r26
    2c5e:	bb 1b       	sub	r27, r27
    2c60:	51 e1       	ldi	r21, 0x11	; 17
    2c62:	07 c0       	rjmp	.+14     	; 0x2c72 <__udivmodhi4_ep>

00002c64 <__udivmodhi4_loop>:
    2c64:	aa 1f       	adc	r26, r26
    2c66:	bb 1f       	adc	r27, r27
    2c68:	a6 17       	cp	r26, r22
    2c6a:	b7 07       	cpc	r27, r23
    2c6c:	10 f0       	brcs	.+4      	; 0x2c72 <__udivmodhi4_ep>
    2c6e:	a6 1b       	sub	r26, r22
    2c70:	b7 0b       	sbc	r27, r23

00002c72 <__udivmodhi4_ep>:
    2c72:	88 1f       	adc	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	5a 95       	dec	r21
    2c78:	a9 f7       	brne	.-22     	; 0x2c64 <__udivmodhi4_loop>
    2c7a:	80 95       	com	r24
    2c7c:	90 95       	com	r25
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	08 95       	ret

00002c84 <__prologue_saves__>:
    2c84:	2f 92       	push	r2
    2c86:	3f 92       	push	r3
    2c88:	4f 92       	push	r4
    2c8a:	5f 92       	push	r5
    2c8c:	6f 92       	push	r6
    2c8e:	7f 92       	push	r7
    2c90:	8f 92       	push	r8
    2c92:	9f 92       	push	r9
    2c94:	af 92       	push	r10
    2c96:	bf 92       	push	r11
    2c98:	cf 92       	push	r12
    2c9a:	df 92       	push	r13
    2c9c:	ef 92       	push	r14
    2c9e:	ff 92       	push	r15
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	ca 1b       	sub	r28, r26
    2cae:	db 0b       	sbc	r29, r27
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	09 94       	ijmp

00002cbc <__epilogue_restores__>:
    2cbc:	2a 88       	ldd	r2, Y+18	; 0x12
    2cbe:	39 88       	ldd	r3, Y+17	; 0x11
    2cc0:	48 88       	ldd	r4, Y+16	; 0x10
    2cc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ccc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cce:	b9 84       	ldd	r11, Y+9	; 0x09
    2cd0:	c8 84       	ldd	r12, Y+8	; 0x08
    2cd2:	df 80       	ldd	r13, Y+7	; 0x07
    2cd4:	ee 80       	ldd	r14, Y+6	; 0x06
    2cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    2cd8:	0c 81       	ldd	r16, Y+4	; 0x04
    2cda:	1b 81       	ldd	r17, Y+3	; 0x03
    2cdc:	aa 81       	ldd	r26, Y+2	; 0x02
    2cde:	b9 81       	ldd	r27, Y+1	; 0x01
    2ce0:	ce 0f       	add	r28, r30
    2ce2:	d1 1d       	adc	r29, r1
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	ed 01       	movw	r28, r26
    2cf0:	08 95       	ret

00002cf2 <_exit>:
    2cf2:	f8 94       	cli

00002cf4 <__stop_program>:
    2cf4:	ff cf       	rjmp	.-2      	; 0x2cf4 <__stop_program>
